[
  {
    "Id": "1448433",
    "ThreadId": "646193",
    "Html": "I am trying to impose restriction on X Axis of a line graph and after I do so, the graph stops refreshing. \r<br />\nHere is how I have included the graph in a user control:<br />\n<pre><code>            &lt;d3:LineGraph DataSource=&quot;{Binding Model.GraphData}&quot; Stroke=&quot;Blue&quot;\n                          StrokeThickness=&quot;2&quot; Name=&quot;graph&quot;&gt;&lt;/d3:LineGraph&gt;</code></pre>\n\nIn the code behind of user control, I have applied the axis restrictions based on a couple of dependency properties which are set on run time based on user input. Here is an extract from the code:<br />\n<pre><code>private static void OnXMinPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n        {\n            ((ucLineGraph)d).myXMin = (double)e.NewValue;\n            ApplyRestrictions(d);\n        }\n\n        private static void OnXMaxPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n        {\n            ((ucLineGraph)d).myXMax = (double)e.NewValue + 1;\n            ApplyRestrictions(d);\n        }\n        private static void ApplyRestrictions(DependencyObject d)\n        {\n            ((ucLineGraph)d).plotter.Viewport.Restrictions.Clear();\n            ((ucLineGraph)d).plotter.Viewport.AutoFitToView = false;\n            ViewportAxesRangeRestriction restr = new ViewportAxesRangeRestriction();\n            restr.XRange = new DisplayRange(((ucLineGraph)d).myXMin, ((ucLineGraph)d).myXMax);\n            ((ucLineGraph)d).plotter.Viewport.Restrictions.Add(restr);\n        }\n#region Custom Classes to apply Viewport Restrictions\n    public class DisplayRange\n    {\n        public double Start { get; set; }\n        public double End { get; set; }\n\n        public DisplayRange(double start, double end)\n        {\n            Start = start;\n            End = end;\n        }\n    }\n\n    public class ViewportAxesRangeRestriction : IViewportRestriction\n    {\n        public DisplayRange XRange = null;\n        public DisplayRange YRange = null;\n\n        public Rect Apply(Rect oldVisible, Rect newVisible, Viewport2D viewport)\n        {\n            if (XRange != null &amp;&amp; (XRange.Start &lt; XRange.End))\n            {\n                newVisible.X = XRange.Start;\n                newVisible.Width = XRange.End - XRange.Start;\n            }\n\n            if (YRange != null)\n            {\n                newVisible.Y = YRange.Start;\n                newVisible.Height = YRange.End - YRange.Start;\n            }\n\n            return newVisible;\n        }\n\n        public event EventHandler Changed;\n    }\n    #endregion</code></pre>\n\nI have tried setting the AutoFitToView property to both true an false but in vein.\r<br />\n<br />\nCan someone please help me with this and guide me what should I be doing to enable auto refresh of the graph. If I remove this restriction, the graph works fine. \r<br />\n<br />\nPS: I have already implemented the the Property change notification in my model as follows:<br />\n<pre><code>public EnumerableDataSource&lt;WavelengthScanResult&gt; GraphData\n        {\n            get\n            {\n                return this._graphData ?? (this._graphData = new EnumerableDataSource&lt;WavelengthScanResult&gt;(SampleCollection));\n            }\n            set\n            {\n                if (value != null)\n                {\n                    this._graphData = value;\n                    NotifyPropertyChanged(&quot;GraphData&quot;);\n                }\n            }\n        }\nprotected void NotifyPropertyChanged(string propInfo)\n        {\n            if (this.PropertyChanged != null)\n            {\n                this.PropertyChanged(this, new PropertyChangedEventArgs(propInfo));\n            }\n        }</code></pre>\n\nMany thanks in advance for taking time out to read through my problem and giving it a thought!<br />\n",
    "PostedDate": "2015-10-14T01:44:18.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]