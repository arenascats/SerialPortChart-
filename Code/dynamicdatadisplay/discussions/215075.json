[
  {
    "Id": "452085",
    "ThreadId": "215075",
    "Html": "<p>Hi D3 team,</p>\r\n<p>The Dynamic Data Display control is great. I've had a lot of success using it in various applications over the last couple of years. Thanks for your hard work!</p>\r\n<p>I was wondering if you could give me some guidance about the best way to retrieve the data points that are currently being displayed. For example, I would like to make a control that will anable the user to click a button and calculate the mean, standard deviation, and other statistics for all of the data points that are currently being displayed in the plotter. So if the user&nbsp;changes the plotter to display different points, and then clicks the button, they will see an updated set of statistics for the new set of points that are being displayed.</p>\r\n<p>I appreciate your help!</p>",
    "PostedDate": "2010-06-05T19:09:08.837-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "454157",
    "ThreadId": "215075",
    "Html": "<p>You would be calculating the mean, standard deviation, and other statistics on the data set you provide to the chart. For example, from the IntensityChart nightlies, here is some code that generates the data set used as the source for the plot:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Window1_Loaded(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n{\r\n\tdata = BuildSampleData(imageSize);\r\n\r\n\tNaiveColorMap map = <span style=\"color:blue\">new</span> NaiveColorMap { Data = data, Palette = UniformLinearPalettes.BlackAndWhitePalette };\r\n\t<span style=\"color:blue\">var</span> bmp = map.BuildImage();\r\n\timage.Source = bmp;\r\n}\r\n\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">double</span>[,] BuildSampleData(<span style=\"color:blue\">int</span> size)\r\n{\r\n\t<span style=\"color:blue\">double</span>[,] data = <span style=\"color:blue\">new</span> <span style=\"color:blue\">double</span>[size, size];\r\n\r\n\t<span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> ix = 0; ix &lt; size; ix++)\r\n\t{\r\n\t\t<span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> iy = 0; iy &lt; size; iy++)\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">double</span> value = Math.Sin(0.05 * ix + 0.07 * iy);\r\n\t\t\tdata[ix, iy] = value;\r\n\t\t}\r\n\t}\r\n\r\n\t<span style=\"color:blue\">return</span> data;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&quot;data&quot; is what you would perform your calculations on, not something from the plotter. The plotter uses interpolation and there could be an infinite set of points displayed depending on the precision you specify.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-10T13:00:17.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "454251",
    "ThreadId": "215075",
    "Html": "<p>Thanks for the response. I don't think that would quite have the effect that I am looking for, since it relies on a generating the data every time, based on some kind of arbitrary input. I'm looking to&nbsp;compute the characteristics of the visible portion of a&nbsp;static set of data (measured points from real world sensors.) Here's my solution that gets the job done, but perhaps has room for some kind of efficiency improvements:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>List&lt;<span style=\"color:blue\">double</span>&gt; x_points = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">double</span>&gt;();\r\nList&lt;<span style=\"color:blue\">double</span>&gt; y_points = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">double</span>&gt;();\r\n<span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> index = 0; index &lt; <span style=\"color:blue\">this</span>._x_data.Length; index++)\r\n{\r\n  <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>._x_data[index] &gt;= <span style=\"color:blue\">this</span>._plotter.VisibleRect.X1 &amp;&amp;\r\n  <span style=\"color:blue\">this</span>._x_data[index] &lt;= <span style=\"color:blue\">this</span>._plotter.VisibleRect.X2 &amp;&amp;\r\n  <span style=\"color:blue\">this</span>._y_data[index] &gt;= <span style=\"color:blue\">this</span>._plotter.VisibleRect.Y1 &amp;&amp;\r\n  <span style=\"color:blue\">this</span>._y_data[index] &lt;= <span style=\"color:blue\">this</span>._plotter.VisibleRect.Y2)\r\n  {\r\n    x_points.Add(<span style=\"color:blue\">this</span>._x_data[index]);\r\n    y_points.Add(<span style=\"color:blue\">this</span>._y_data[index]);\r\n  }\r\n}</pre>\r\n<pre>// compute statistics on x_points and y_points\r\n</pre>\r\n</div>\r\n<p>_plotter is of type GenericChartPlotter&lt;double, double&gt;.</p>\r\n<p>Also, its not quite clear when to call this. I'd like the stats to update whenever the points that are displayed in the plotter viewport changes, but the Viewport.SizeChanged event doesn't always seem to fire.</p>\r\n<p>In any case, I have a working solution, but any recommendations about optimizing it are welcome. :)</p>",
    "PostedDate": "2010-06-10T20:02:35.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]