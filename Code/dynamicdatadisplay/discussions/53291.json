[
  {
    "Id": "179277",
    "ThreadId": "53291",
    "Html": "Hi,<br>\r\n<br>\r\nI am working with the version posted on a precedent discussion under Windows Vista:<br>\r\nhttp://cid-eaf0a921258b5980.skydrive.live.com/self.aspx/.Public/D3/DynamicDataDisplay.zip<br>\r\n<br>\r\nIn the following code, I simply added a chartPlotter (called &quot;plotter&quot;) to a window and a button to start the simulation.<br>\r\nIf you start debugging, a StackOverFlowException will appear (&quot;An unhandled exception of type 'System.StackOverflowException' occurred in WindowsBase.dll&quot;) .<br>\r\n<br>\r\nPlease, try it!<br>\r\n<br>\r\nNow, if you think that the overflow exception appears because of this line of code : &quot;Thread.Sleep(1)&quot;, try this: <br>\r\n<ul>\r\n    <li>Replace &quot;Thread.Sleep(1)&quot; by &quot;Thread.Sleep(100)&quot;</li>\r\n    <li>Put a breakpoint in the debug mode at the following line &quot;_source.AppendAsync(Dispatcher, NewTrade);&quot;</li>\r\n    <li>Start the debug and you are going to see the stackOverflow beginning in the call Stack of VS 2008. But here is the strange thing. If you don't see the stackOverflow beginning, stop the debug mode and start it a second time. If you still don't see it, stop and start a third time. And so on, and you are going the see the bug before the fifth try!!!</li>\r\n</ul>\r\nNow, Replace &quot;Thread.Sleep(100)&quot; by &quot;Thread.Sleep(1000)&quot; and you will never see the bug again...<br>\r\n<br>\r\nThis kind of bug didn't exist in the first release of ddd.<br>\r\n<br>\r\nPlease, can anyone help me on this?<br>\r\n<br>\r\nI am using ddd for financial application on tick data (each transaction). Since a lot of transaction could appear in a second I still can not use my application to trade into the market.<br>\r\n<br>\r\nThanks a lot,<br>\r\nKamel<br>\r\n<br>\r\n<br>\r\n<br>\r\nXAML code:<br>\r\n<br>\r\n&lt;Window x:Class=&quot;ddd_overflow.Window1&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:my=&quot;http://research.microsoft.com/DynamicDataDisplay/1.0&quot;<br>\r\n&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Grid&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;my:ChartPlotter Margin=&quot;12,24,12,41&quot; Name=&quot;plotter&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button Height=&quot;19&quot; Margin=&quot;93,0,88,11&quot; Name=&quot;button1&quot; VerticalAlignment=&quot;Bottom&quot; Click=&quot;button1_Click&quot;&gt;Button&lt;/Button&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/Grid&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\n<br>\r\nC# code: <br>\r\nusing System;<br>\r\nusing System.Collections.Generic;<br>\r\nusing System.Linq;<br>\r\nusing System.Text;<br>\r\nusing System.Windows;<br>\r\nusing System.Windows.Controls;<br>\r\nusing System.Windows.Data;<br>\r\nusing System.Windows.Documents;<br>\r\nusing System.Windows.Input;<br>\r\nusing System.Windows.Media;<br>\r\nusing System.Windows.Media.Imaging;<br>\r\nusing System.Windows.Navigation;<br>\r\nusing System.Windows.Shapes;<br>\r\nusing System.Threading;<br>\r\nusing Microsoft.Research.DynamicDataDisplay;<br>\r\nusing Microsoft.Research.DynamicDataDisplay.DataSources;<br>\r\n<br>\r\nnamespace ddd_overflow<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp; /// Interaction logic for Window1.xaml<br>\r\n&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp; public partial class Window1 : Window<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ObservableDataSource&lt;Trade&gt; _source;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Random _rand;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Window1()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _rand = new Random();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditPlotter();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void EditPlotter()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _source = new ObservableDataSource&lt;Trade&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _source.SetXMapping(x =&gt; x.Counter);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _source.SetYMapping(y =&gt; y.Price);<br>\r\n&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plotter.AddLineGraph(_source,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Pen(Brushes.Gold, 3),<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PenDescription(&quot;Sin(x + phase)&quot;));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void AddNewTrade(Trade NewTrade)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plotter.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Normal,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (System.Threading.ThreadStart)delegate()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///////// Put a breakpoint at the following line! //////////////<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _source.AppendAsync(Dispatcher, NewTrade);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ////////////////////////////////////////////////////////////////////////////////<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception ex)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(ex.ToString());<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void button1_Click(object sender, RoutedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread thread = new Thread(BeginSimulation);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thread.Start();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void BeginSimulation()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int counter = 0;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 1000000; i++)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; counter++;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trade trade = new Trade();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trade.Counter = counter;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trade.Price = _rand.NextDouble();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AddNewTrade(trade);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.Sleep(1);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class Trade<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Counter { get; set; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Price { get; set; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-14T15:59:42.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "179575",
    "ThreadId": "53291",
    "Html": "Hi,<br>\r\n<br>\r\nMarket opening this morning, the application frozed right away! Lol...<br>\r\n<br>\r\nThe StackOverflowException doesn't come from the fact there are too much data but when when the data are updated too fast.<br>\r\n<br>\r\nI am stuck, any help would be greatly appreciated :)<br>\r\n<br>\r\nThanks,<br>\r\nKamel \r\n",
    "PostedDate": "2009-04-15T06:40:25.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "180028",
    "ThreadId": "53291",
    "Html": "Hi, Kamel!<div><br></div><div>I've reproduced bug you've described.</div><div><br></div><div>You can change your method AddNewTrade method, removing calling of Dispatcher.BeginInvoke(...), so that the complete body of this method will look like this:</div><div><span style=\"font-family:consolas;font-size:12px\"><span style=\"white-space:pre\">\t</span><span style=\"color:blue\">void</span> AddNewTrade(<span style=\"color:rgb(43, 145, 175)\">Trade</span> NewTrade)</span><br></div><div style=\"font-family:consolas;font-size:9pt;color:black;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:white;background-position:initial initial\"><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">        {</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">            _source.AppendAsync(Dispatcher, NewTrade);</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">        }</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">This stops StackOverflowException from appearing.</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\"></p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">Also I can advice you to set property IsBackground to true at thread you are creating. This is not connected to DynamicDataDisplay but this will allow application to close when you close main window (when thread you are creating is not background, it will exist after main thread exiting and application will live forever even when you've closed main window).</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\"></p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">Yours,</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">Mikhail Brinchuk,</p><p style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px\">DynamicDataDisplay Dev Team.</p></div>",
    "PostedDate": "2009-04-16T02:25:55.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "180098",
    "ThreadId": "53291",
    "Html": "As easy as deleting some code?<br>\r\nI love it!<br>\r\n<br>\r\nThanks, it works great!&nbsp; :)<br>\r\n<br>\r\nKamel<br>\r\n",
    "PostedDate": "2009-04-16T05:04:10.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]