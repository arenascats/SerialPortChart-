[
  {
    "Id": "580928",
    "ThreadId": "249830",
    "Html": "\r\n<p>I'm using the chart plotter object to display line graphs of raw data along with statistic values.&nbsp; The idea is to keep all the related lines the same color and have different dash styles for each type of statistic, i.e. mean, max, etc.&nbsp; This is\r\n all working but the dashstyle from the pen specified is not being translated to the the legend's stroke component.&nbsp; Is there a way to do this?&nbsp;</p>\r\n<p>Thanks,<br>\r\nMark</p>\r\n",
    "PostedDate": "2011-03-15T12:52:42.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683167",
    "ThreadId": "249830",
    "Html": "<p>I'd love to know how to do this one as well.&nbsp;</p>",
    "PostedDate": "2011-10-12T07:46:58.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1203778",
    "ThreadId": "249830",
    "Html": "I was able to do this by modifying the source code, if you're courageous enough.<br />\n<br />\nI don't know if <em>all</em> the changes I made are necessary, but this is what I did and it is working nicely. All of these files are in the project DynamicDataDisplay. Since most of the work was already done for me, I just had to find where &quot;Stroke&quot; and &quot;StrokeThickness&quot; were being set, and add &quot;StrokeDashArray&quot;, &quot;StrokeDashCap&quot;, &quot;StrokeDashOffset&quot;, and &quot;StrokeDashStyle&quot; (the last of which actually encompasses StrokeDashArray and StrokeDashOffset, so if you set that it will set the others).<br />\n<br />\nPay attention to where I &quot;Add&quot; versus where I &quot;replace&quot;.<br />\n<br />\nLineGraph.cs:<br />\n<pre><code>        [...]\n        // replace:\n        private static IEnumerable&lt;FrameworkElement&gt; DefaultLegendItemsBuilder(IPlotterElement plotterElement)\n        {\n            LineGraph lineGraph = (LineGraph)plotterElement;\n\n            Line line = new Line { X1 = 0, Y1 = 10, X2 = 20, Y2 = 0, Stretch = Stretch.Fill, DataContext = lineGraph };\n            line.SetBinding(Line.StrokeProperty, &quot;Stroke&quot;);\n            line.SetBinding(Line.StrokeThicknessProperty, &quot;StrokeThickness&quot;);\n            line.SetBinding(Line.StrokeDashArrayProperty, &quot;StrokeDashArray&quot;);\n            line.SetBinding(Line.StrokeDashCapProperty, &quot;StrokeDashCap&quot;);\n            NewLegend.SetVisualContent(lineGraph, line);\n\n            var legendItem = LegendItemsHelper.BuildDefaultLegendItem(lineGraph);\n            yield return legendItem;\n        }\n\n        [...]\n        // Add:\n\n        /// &lt;summary&gt;\n        /// Gets or sets the line dash array.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;The line dash array.&lt;/value&gt;\n        public DoubleCollection StrokeDashArray\n        {\n            get { return LinePen.DashStyle.Dashes; }\n            set\n            {\n                if (LinePen.DashStyle.Dashes != value)\n                {\n                    if (!LinePen.IsSealed)\n                    {\n                        LinePen.DashStyle.Dashes = value; InvalidateVisual();\n                    }\n                    else\n                    {\n                        Pen pen = LinePen.Clone();\n                        pen.DashStyle.Dashes = value;\n                        LinePen = pen;\n                    }\n\n                    RaisePropertyChanged(&quot;StrokeDashArray&quot;);\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Gets or sets the line dash cap.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;The line dash cap.&lt;/value&gt;\n        public PenLineCap StrokeDashCap\n        {\n            get { return LinePen.DashCap; }\n            set\n            {\n                if (LinePen.DashCap != value)\n                {\n                    if (!LinePen.IsSealed)\n                    {\n                        LinePen.DashCap = value; InvalidateVisual();\n                    }\n                    else\n                    {\n                        Pen pen = LinePen.Clone();\n                        pen.DashCap = value;\n                        LinePen = pen;\n                    }\n\n                    RaisePropertyChanged(&quot;StrokeDashCap&quot;);\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Gets or sets the line dash offset.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;The line dash offset.&lt;/value&gt;\n        public double StrokeDashOffset\n        {\n            get { return LinePen.DashStyle.Offset; }\n            set\n            {\n                if (LinePen.DashStyle.Offset != value)\n                {\n                    if (!LinePen.IsSealed)\n                    {\n                        LinePen.DashStyle.Offset = value; InvalidateVisual();\n                    }\n                    else\n                    {\n                        Pen pen = LinePen.Clone();\n                        pen.DashStyle.Offset = value;\n                        LinePen = pen;\n                    }\n\n                    RaisePropertyChanged(&quot;StrokeDashOffset&quot;);\n                }\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Gets or sets the line dash style.\n        /// &lt;/summary&gt;\n        /// &lt;value&gt;The line dash style.&lt;/value&gt;\n        public DashStyle StrokeDashStyle\n        {\n            get { return LinePen.DashStyle; }\n            set\n            {\n                if (LinePen.DashStyle != value)\n                {\n                    if (!LinePen.IsSealed)\n                    {\n                        LinePen.DashStyle = value; InvalidateVisual();\n                    }\n                    else\n                    {\n                        Pen pen = LinePen.Clone();\n                        pen.DashStyle = value;\n                        LinePen = pen;\n                    }\n\n                    RaisePropertyChanged(&quot;StrokeDashStyle&quot;);\n                }\n            }\n        }\n\n</code></pre>\n\nLineLegendItem.xaml:<br />\n<pre><code>                &lt;!-- Replace: --&gt;\n                &lt;Line X1=&quot;3&quot; X2=&quot;20&quot; Y1=&quot;10&quot; Y2=&quot;5&quot; \n                      Stroke=&quot;{Binding Stroke}&quot; \n                      StrokeThickness=&quot;{Binding StrokeThickness}&quot; \n                      StrokeDashArray=&quot;{Binding Path=StrokeDashArray}&quot; \n                      StrokeDashCap=&quot;{Binding Path=StrokeDashCap}&quot;\n                      StrokeDashOffset=&quot;{Binding Path=StrokeDashOffset}&quot; /&gt;\n</code></pre>\n\nPenDescription.cs:<br />\n<pre><code>        // replace:\n        protected override void AttachCore(UIElement graph)\n        {\n            base.AttachCore(graph);\n            LineGraph g = graph as LineGraph;\n            if (g == null)\n            {\n                throw new ArgumentException(&quot;Pen description can only be attached to PointsGraph&quot;, &quot;graph&quot;);\n            }\n\n            SetBinding(StrokeProperty, new Binding(&quot;Stroke&quot;) { Source = g });\n            SetBinding(StrokeThicknessProperty, new Binding(&quot;StrokeThickness&quot;) { Source = g });\n            SetBinding(StrokeDashArrayProperty, new Binding(&quot;StrokeDashArray&quot;) { Source = g });\n            SetBinding(StrokeDashCapProperty, new Binding(&quot;StrokeDashCap&quot;) { Source = g });\n            SetBinding(StrokeDashOffsetProperty, new Binding(&quot;StrokeDashOffset&quot;) { Source = g });\n            SetBinding(StrokeDashStyleProperty, new Binding(&quot;StrokeDashStyle&quot;) { Source = g });\n        }\n\n        // add:\n        public static readonly DependencyProperty StrokeDashArrayProperty = DependencyProperty.Register(\n          &quot;StrokeDashArray&quot;,\n          typeof(DoubleCollection),\n          typeof(PenDescription),\n          new FrameworkPropertyMetadata(null));\n\n        public PenLineCap StrokeDashCap\n        {\n            get { return (PenLineCap)GetValue(StrokeDashCapProperty); }\n            set { SetValue(StrokeDashCapProperty, value); }\n        }\n\n        public static readonly DependencyProperty StrokeDashCapProperty = DependencyProperty.Register(\n          &quot;StrokeDashCap&quot;,\n          typeof(PenLineCap),\n          typeof(PenDescription),\n          new FrameworkPropertyMetadata(null));\n\n        public double StrokeDashOffset\n        {\n            get { return (double)GetValue(StrokeDashOffsetProperty); }\n            set { SetValue(StrokeDashOffsetProperty, value); }\n        }\n\n        public static readonly DependencyProperty StrokeDashOffsetProperty = DependencyProperty.Register(\n          &quot;StrokeDashOffset&quot;,\n          typeof(double),\n          typeof(PenDescription),\n          new FrameworkPropertyMetadata(0.0));\n\n        public DashStyle StrokeDashStyle\n        {\n            get { return (DashStyle)GetValue(StrokeDashStyleProperty); }\n            set { SetValue(StrokeDashStyleProperty, value); }\n        }\n\n        public static readonly DependencyProperty StrokeDashStyleProperty = DependencyProperty.Register(\n          &quot;StrokeDashStyle&quot;,\n          typeof(DashStyle),\n          typeof(PenDescription),\n          new FrameworkPropertyMetadata(null));\n</code></pre>\n\n",
    "PostedDate": "2014-02-06T13:51:12.303-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]