[
  {
    "Id": "591013",
    "ThreadId": "252339",
    "Html": "\r\n<p>Hi All,</p>\r\n<p>I was going through&nbsp;an article on the usage of Dynamic Data Display <a href=\"https://aps.mail.microsoft.com/OWA/redir.aspx?C=2ac784f4dfbc41499fb10dfb9855bd14&URL=http%3a%2f%2fmsdn.microsoft.com%2fen-us%2fmagazine%2fff714591.aspx\" target=\"_blank\">\r\nhttp://msdn.microsoft.com/en-us/magazine/ff714591.aspx</a>&nbsp;just to play around with plotting data programmatically and saving them.<br>\r\nI tried to programmatically save the screenshot of the generated image for the BugGraph code in the above link using plotter.SaveScreenshot(string filename) method.<br>\r\nIt is saving the control but, not the data points and the corresponding graph when I try saving programmatically\r\n<br>\r\nI tried the Plotter.SaveScreenShotToStream(Stream stream, String extension), but that too produced the same output as the above method.</p>\r\n<p>However, when I save the image by doing a right click on the generated Graph and choose the SaveScreenshot menuitem, it saves the data points and the generated graph.<br>\r\nI downloaded the source code to see if the right click is invoking a different command, but doesn&rsquo;t seem so.</p>\r\n<p>I have tried searching the forums but couldnt find a similar issue.<br>\r\nI am new to WPF and could you tell me if there is some intermediate command that I am missing before I invoke SaveScreenshot?<br>\r\nOR is there any other way to save the screenshot using Dynamic Data Display?</p>\r\n<p>Here is the code:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n\r\n<span style=\"color:blue\">using</span> System.IO;\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay; <span style=\"color:green\">// Core functionality</span>\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.DataSources; <span style=\"color:green\">// EnumerableDataSource</span>\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.PointMarkers;\r\n<span style=\"color:blue\">using</span> System.Globalization; <span style=\"color:green\">// CirclePointMarker</span>\r\n\r\n<span style=\"color:blue\">namespace</span> WpfApplication1\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Interaction logic for Window1.xaml</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> Window1 : Window\r\n    {\r\n        <span style=\"color:blue\">public</span> Window1()\r\n        {\r\n            InitializeComponent();\r\n            Loaded &#43;= <span style=\"color:blue\">new</span> RoutedEventHandler(Window1_Loaded);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Window1_Loaded(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            List&lt;BugInfo&gt; bugInfoList = LoadBugInfo(<span style=\"color:#a31515\">&quot;..\\\\..\\\\BugInfo.txt&quot;</span>);\r\n\r\n            DateTime[] dates = <span style=\"color:blue\">new</span> DateTime[bugInfoList.Count];\r\n            <span style=\"color:blue\">int</span>[] numberOpen = <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[bugInfoList.Count];\r\n            <span style=\"color:blue\">int</span>[] numberClosed = <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[bugInfoList.Count];\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; bugInfoList.Count; &#43;&#43;i)\r\n            {\r\n                dates[i] = bugInfoList[i].date;\r\n                numberOpen[i] = bugInfoList[i].numberOpen;\r\n                numberClosed[i] = bugInfoList[i].numberClosed;\r\n            }\r\n\r\n            <span style=\"color:blue\">var</span> datesDataSource = <span style=\"color:blue\">new</span> EnumerableDataSource&lt;DateTime&gt;(dates);\r\n            datesDataSource.SetXMapping(x =&gt; dateAxis.ConvertToDouble(x));\r\n\r\n            <span style=\"color:blue\">var</span> numberOpenDataSource = <span style=\"color:blue\">new</span> EnumerableDataSource&lt;<span style=\"color:blue\">int</span>&gt;(numberOpen);\r\n            numberOpenDataSource.SetYMapping(y =&gt; y);\r\n\r\n            <span style=\"color:blue\">var</span> numberClosedDataSource = <span style=\"color:blue\">new</span> EnumerableDataSource&lt;<span style=\"color:blue\">int</span>&gt;(numberClosed);\r\n            numberClosedDataSource.SetYMapping(y =&gt; y);\r\n\r\n            CompositeDataSource compositeDataSource1 = <span style=\"color:blue\">new</span>\r\n              CompositeDataSource(datesDataSource, numberOpenDataSource);\r\n            CompositeDataSource compositeDataSource2 = <span style=\"color:blue\">new</span>\r\n              CompositeDataSource(datesDataSource, numberClosedDataSource);\r\n\r\n            plotter.AddLineGraph(compositeDataSource1,\r\n              <span style=\"color:blue\">new</span> Pen(Brushes.Blue, 2),\r\n              <span style=\"color:blue\">new</span> CirclePointMarker { Size = 10.0, Fill = Brushes.Red },\r\n              <span style=\"color:blue\">new</span> PenDescription(<span style=\"color:#a31515\">&quot;Number bugs open&quot;</span>));\r\n\r\n            plotter.AddLineGraph(compositeDataSource2,\r\n              <span style=\"color:blue\">new</span> Pen(Brushes.Green, 2),\r\n              <span style=\"color:blue\">new</span> TrianglePointMarker\r\n              {\r\n                  Size = 10.0,\r\n                  Pen = <span style=\"color:blue\">new</span> Pen(Brushes.Black, 2.0),\r\n                  Fill = Brushes.GreenYellow\r\n              },\r\n              <span style=\"color:blue\">new</span> PenDescription(<span style=\"color:#a31515\">&quot;Number bugs closed&quot;</span>));\r\n\r\n            plotter.Viewport.FitToView();\r\n            plotter.SaveScreenshot(<span style=\"color:#a31515\">@&quot;C:\\Users\\arvind\\Desktop\\1.png&quot;</span>);\r\n            <span style=\"color:green\">//using (Stream screenshotStream = File.Create(@&quot;C:\\Users\\arvindsu\\Desktop\\1.png&quot;))</span>\r\n            <span style=\"color:green\">//{</span>\r\n            <span style=\"color:green\">//    plotter.SaveScreenshotToStream(screenshotStream, &quot;png&quot;);</span>\r\n            <span style=\"color:green\">//}</span>\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> List&lt;BugInfo&gt; LoadBugInfo(<span style=\"color:blue\">string</span> fileName)\r\n        {\r\n            <span style=\"color:blue\">var</span> result = <span style=\"color:blue\">new</span> List&lt;BugInfo&gt;();\r\n            FileStream fs = <span style=\"color:blue\">new</span> FileStream(fileName, FileMode.Open);\r\n            StreamReader sr = <span style=\"color:blue\">new</span> StreamReader(fs);\r\n            DateTimeFormatInfo dtfi = CultureInfo.CreateSpecificCulture(<span style=\"color:#a31515\">&quot;en-US&quot;</span>).DateTimeFormat;\r\n\r\n            <span style=\"color:blue\">string</span> line = <span style=\"color:#a31515\">&quot;&quot;</span>;\r\n            <span style=\"color:blue\">while</span> ((line = sr.ReadLine()) != <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">if</span> (String.IsNullOrEmpty(line)) <span style=\"color:blue\">continue</span>;\r\n\r\n                <span style=\"color:blue\">string</span>[] pieces = line.Split(<span style=\"color:#a31515\">':'</span>);\r\n                \r\n                DateTime d = DateTime.Parse(pieces[0], dtfi);\r\n                <span style=\"color:blue\">int</span> numopen = <span style=\"color:blue\">int</span>.Parse(pieces[1]);\r\n                <span style=\"color:blue\">int</span> numclosed = <span style=\"color:blue\">int</span>.Parse(pieces[2]);\r\n                BugInfo bi = <span style=\"color:blue\">new</span> BugInfo(d, numopen, numclosed);\r\n                result.Add(bi);\r\n            }\r\n            sr.Close();\r\n            fs.Close();\r\n            <span style=\"color:blue\">return</span> result;\r\n        }\r\n\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> BugInfo\r\n    {\r\n        <span style=\"color:blue\">public</span> DateTime date;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> numberOpen;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> numberClosed;\r\n\r\n        <span style=\"color:blue\">public</span> BugInfo(DateTime date, <span style=\"color:blue\">int</span> numberOpen, <span style=\"color:blue\">int</span> numberClosed)\r\n        {\r\n            <span style=\"color:blue\">this</span>.date = date;\r\n            <span style=\"color:blue\">this</span>.numberOpen = numberOpen;\r\n            <span style=\"color:blue\">this</span>.numberClosed = numberClosed;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2011-04-03T15:24:00.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "616860",
    "ThreadId": "252339",
    "Html": "<p>Hi,</p>\r\n<p>I've run into same problem today, but after going through code and websites I've found a solution for this. Helpful was post about similar problem with other library: http://news.infragistics.com/forums/p/12901/48251.aspx#48251<br />I've done this like that, it's not elegant but I hadn't more time to test other options:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>{ .... some function ... }\r\n\r\nChartPlotter plot = <span style=\"color: blue;\">new</span> ChartPlotter();\r\n InitPlotter(plot); <span style=\"color: green;\">// this one is important</span>\r\n ChartHelper.GenerateFitnessChart(viewModel, plot); <span style=\"color: green;\">// it's my function which is only adding LineGraph to plotter</span>\r\n filePath = <span style=\"color: #a31515;\">\"{path to file}\"</span>;\r\n SaveScreenshot(plot, filePath); <span style=\"color: green;\">// important</span>\r\n\r\n<span style=\"color: green;\">// I'm cleaning up this object because after only removing elements and adding new ones</span>\r\n<span style=\"color: green;\">// rendering were, how to say that without bad words :P messed up</span>\r\nplot.RemoveUserElements();\r\nplot = <span style=\"color: blue;\">null</span>;\r\n\r\n<span style=\"color: green;\">// after that i'm assigning \"plot = new ChartPlotter();\" if i need more plots to files</span>\r\n\r\n{ ... some other function lines ... }\r\n</pre>\r\n<pre><br /></pre>\r\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: green;\">// Initializing ChartPlotter without window, we have to assign width and height</span>\r\n<span style=\"color: green;\">// imgWidth and imgHeight is your desired format</span>\r\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> InitPlotter(ChartPlotter plot)\r\n        {\r\n            plot.Width = imgWidth;\r\n            plot.Height = imgHeight;\r\n            Size size = <span style=\"color: blue;\">new</span> Size(imgWidth, imgHeight);\r\n            plot.RenderSize = size;\r\n        }\r\n\r\n<span style=\"color: green;\">// It's modified function similar to the one in DDD source</span>\r\n<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> SaveScreenshot(ChartPlotter plot, <span style=\"color: blue;\">string</span> filepath)\r\n        {\r\n            Size size = <span style=\"color: blue;\">new</span> Size(imgWidth, imgHeight);\r\n\r\n            Grid grid = <span style=\"color: blue;\">new</span> Grid();\r\n            grid.Children.Add(plot);\r\n\r\n<span style=\"color: green;\">// Don't ask me if something is unnecessary here or what order should be,</span>\r\n<span style=\"color: green;\">// after many test this configuration worked for me</span>\r\n            plot.Measure(<span style=\"color: blue;\">new</span> Size(imgWidth, imgHeight));\r\n            plot.Arrange(<span style=\"color: blue;\">new</span> Rect(0, 0, imgWidth, imgHeight));\r\n            plot.PerformLoad();\r\n            plot.UpdateLayout();\r\n            plot.InvalidateVisual();\r\n\r\n            RenderTargetBitmap bmp = <span style=\"color: blue;\">new</span> RenderTargetBitmap((<span style=\"color: blue;\">int</span>)size.Width, (<span style=\"color: blue;\">int</span>)size.Height,\r\n                96d, 96d, PixelFormats.Pbgra32);\r\n            grid.Measure(size);\r\n            grid.Arrange(<span style=\"color: blue;\">new</span> Rect(0, 0, size.Width, size.Height));\r\n            bmp.Render(grid);\r\n\r\n            PngBitmapEncoder png = <span style=\"color: blue;\">new</span> PngBitmapEncoder();\r\n            png.Frames.Add(BitmapFrame.Create(bmp));\r\n\r\n            <span style=\"color: blue;\">using </span>(Stream str = File.Create(filepath))\r\n            {\r\n                png.Save(str);\r\n            }\r\n\r\n            grid.Children.Remove(plot);\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\nJack</p>",
    "PostedDate": "2011-05-23T09:56:51.297-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "684461",
    "ThreadId": "252339",
    "Html": "<p>Jack, your post here is a godsend. &nbsp;I've been banging my head against the wall trying to get the ChartPlotter to render offscreen so I could capture bitmaps for a PDF report. &nbsp;The key calls I was missing, was \"PerformLoad\" and \"InvalidateVisual\". &nbsp;After many hours of failure to get this working, your solution works like a champ! &nbsp;Thanks!!!</p>\r\n<p>Robin</p>",
    "PostedDate": "2011-10-14T13:47:02.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "684585",
    "ThreadId": "252339",
    "Html": "<p>I'm glad that it helped you :)</p>\r\n<p>Jack</p>",
    "PostedDate": "2011-10-15T01:18:03.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1367034",
    "ThreadId": "252339",
    "Html": "i got following error <br />\n<pre><code>{&quot;Specified element is already the logical child of another element. Disconnect it first.&quot;} System.Exception {System.InvalidOperationException}\n</code></pre>\n\nGrid grid = new Grid();\r<br />\nGrid.Children.Add(plot); here i get error. <br />\n",
    "PostedDate": "2015-03-19T05:23:14.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1367429",
    "ThreadId": "252339",
    "Html": "Hi\r<br />\n<br />\nDetaching the items from prarent gird and attaching again to parent grid, these are little bit difficult to do,\r<br />\n<br />\nthe easy way is use printdialog.PrintVisual(gridName, &quot;docName&quot;);\r<br />\n<br />\nbefore that you may need to scale it based on (use scale transform and layoutTransform).\r<br />\n<br />\nRegards\r<br />\nRavi<br />\n",
    "PostedDate": "2015-03-19T22:33:50.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1450243",
    "ThreadId": "252339",
    "Html": "Hi \r<br />\n<br />\nI'm having a similar problem with multiple graphs used in a tab control and I'm calling the SaveScreenshot method for each ChartPlotter but the only screenshots that work are when the current tab control view is set to the graphs.\r<br />\nI saw the plotter.PerformLoad() method but it that method doesn't seem to be in any part of the library.\r<br />\nI've tried various things like UpdateLayout(), InvalidateVisual(), Focus() and FitToView() but can't seem to get it working\r<br />\n<br />\nAm I going wrong anywhere? Any help would be very much appreciated.\r<br />\n<br />\nRegards\r<br />\nIain<br />\n",
    "PostedDate": "2015-10-29T01:30:04.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]