[
  {
    "Id": "587564",
    "ThreadId": "251482",
    "Html": "<p>Hi</p>\n<p>I was needed to implement a application conformant mouse navigation. This was not possible with the MouseNavigation class provided. I therefor changed the class, in order to make it more flexible. Maybe you want to reflect this changes in your code. I've changed it in a way, the current behaviour will not change, if the new methods are not overloaded. Here is a list of the&nbsp;the changes I've made:</p>\n<ul>\n<li>There are new Methods checking if panning and zooming has to be continued/stopped. </li>\n<li>There is now a difference between zooming and zooming an area. </li>\n<li>Zooming can now be implemented in MouseMove </li>\n</ul>\n<p>You will find the new code below.</p>\n<p>Best regards, Torsten</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Windows;\r\n<span style=\"color: blue;\">using</span> System.Windows.Documents;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n<span style=\"color: blue;\">using</span> Microsoft.Research.DynamicDataDisplay;\r\n<span style=\"color: blue;\">using</span> Microsoft.Research.DynamicDataDisplay.Navigation;\r\n\r\n<span style=\"color: blue;\">namespace</span> KukaRoboter.ProcessValueEditor.ComponentUI.Editor\r\n{\r\n   <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span><span style=\"color: green;\">Provides common methods of mouse navigation around viewport&lt;/summary&gt;</span>\r\n   <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> MouseNavigationFixed : NavigationBase\r\n   {\r\n      <span style=\"color: blue;\">private</span> AdornerLayer adornerLayer;\r\n      <span style=\"color: blue;\">protected</span> AdornerLayer AdornerLayer\r\n      {\r\n         <span style=\"color: blue;\">get</span>\r\n         {\r\n            <span style=\"color: blue;\">if</span> (adornerLayer == <span style=\"color: blue;\">null</span>)\r\n            {\r\n               adornerLayer = AdornerLayer.GetAdornerLayer(<span style=\"color: blue;\">this</span>);\r\n               <span style=\"color: blue;\">if</span> (adornerLayer != <span style=\"color: blue;\">null</span>)\r\n               {\r\n                  adornerLayer.IsHitTestVisible = <span style=\"color: blue;\">false</span>;\r\n               }\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> adornerLayer;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnPlotterAttached(Plotter plotter)\r\n      {\r\n         <span style=\"color: blue;\">base</span>.OnPlotterAttached(plotter);\r\n\r\n         Mouse.AddPreviewMouseDownHandler(Parent, OnMouseDown);\r\n         Mouse.AddPreviewMouseMoveHandler(Parent, OnMouseMove);\r\n         Mouse.AddPreviewMouseUpHandler(Parent, OnMouseUp);\r\n         Mouse.AddPreviewMouseWheelHandler(Parent, OnMouseWheel);\r\n      }\r\n\r\n      <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnPlotterDetaching(Plotter plotter)\r\n      {\r\n         Mouse.RemovePreviewMouseDownHandler(Parent, OnMouseDown);\r\n         Mouse.RemovePreviewMouseMoveHandler(Parent, OnMouseMove);\r\n         Mouse.RemovePreviewMouseUpHandler(Parent, OnMouseUp);\r\n         Mouse.RemovePreviewMouseWheelHandler(Parent, OnMouseWheel);\r\n\r\n         <span style=\"color: blue;\">base</span>.OnPlotterDetaching(plotter);\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> OnMouseWheel(<span style=\"color: blue;\">object</span> sender, MouseWheelEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">if</span> (!e.Handled)\r\n         {\r\n            HandleMouseWheel(e);\r\n\r\n            e.Handled = <span style=\"color: blue;\">true</span>;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">void</span> HandleMouseWheel(MouseWheelEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">int</span> delta = -e.Delta;\r\n         Point mousePos = e.GetPosition(<span style=\"color: blue;\">this</span>);\r\n         MouseWheelZoom(mousePos, delta);\r\n      }\r\n\r\n<span style=\"color: blue;\">#if</span> DEBUG\r\n      <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">string</span> ToString()\r\n      {\r\n         <span style=\"color: blue;\">if</span> (!String.IsNullOrEmpty(Name))\r\n         {\r\n            <span style=\"color: blue;\">return</span> Name;\r\n         }\r\n         <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">base</span>.ToString();\r\n      }\r\n<span style=\"color: blue;\">#endif</span>\r\n\r\n      <span style=\"color: blue;\">bool</span> adornerAdded;\r\n      RectangleSelectionAdorner selectionAdorner;\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> AddSelectionAdorner()\r\n      {\r\n         <span style=\"color: blue;\">if</span> (!adornerAdded)\r\n         {\r\n            AdornerLayer layer = AdornerLayer;\r\n            <span style=\"color: blue;\">if</span> (layer != <span style=\"color: blue;\">null</span>)\r\n            {\r\n               selectionAdorner = <span style=\"color: blue;\">new</span> RectangleSelectionAdorner(<span style=\"color: blue;\">this</span>) { Border = zoomRect };\r\n\r\n               layer.Add(selectionAdorner);\r\n               adornerAdded = <span style=\"color: blue;\">true</span>;\r\n            }\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> RemoveSelectionAdorner()\r\n      {\r\n         AdornerLayer layer = AdornerLayer;\r\n         <span style=\"color: blue;\">if</span> (layer != <span style=\"color: blue;\">null</span>)\r\n         {\r\n            layer.Remove(selectionAdorner);\r\n            adornerAdded = <span style=\"color: blue;\">false</span>;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> UpdateSelectionAdorner()\r\n      {\r\n         selectionAdorner.Border = zoomRect;\r\n         selectionAdorner.InvalidateVisual();\r\n      }\r\n\r\n      Rect? zoomRect;\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">double</span> wheelZoomSpeed = 1.2;\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> shouldKeepRatioWhileZooming;\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isZooming;\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">bool</span> IsZooming\r\n      {\r\n         <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> isZooming; }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isZoomingArea;\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">bool</span> IsZoomingArea\r\n      {\r\n         <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> isZoomingArea; }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isPanning;\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">bool</span> IsPanning\r\n      {\r\n         <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> isPanning; }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> Point panningStartPointInViewport;\r\n      <span style=\"color: blue;\">protected</span> Point PanningStartPointInViewport\r\n      {\r\n         <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> panningStartPointInViewport; }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> Point zoomStartPoint;\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> IsShiftOrCtrl\r\n      {\r\n         <span style=\"color: blue;\">get</span>\r\n         {\r\n            ModifierKeys currKeys = Keyboard.Modifiers;\r\n            <span style=\"color: blue;\">return</span> (currKeys | ModifierKeys.Shift) == currKeys ||\r\n               (currKeys | ModifierKeys.Control) == currKeys;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStartPanning(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.ChangedButton == MouseButton.Left &amp;&amp; Keyboard.Modifiers == ModifierKeys.None;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldContinuePanning(MouseEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.LeftButton == MouseButtonState.Pressed;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStopPanning(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStartZoom(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldContinueZoom(MouseEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStopZoom(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.LeftButton == MouseButtonState.Released;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStartZoomArea(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.ChangedButton == MouseButton.Left &amp;&amp; IsShiftOrCtrl;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldContinueZoomArea(MouseEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.LeftButton == MouseButtonState.Pressed;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">bool</span> ShouldStopZoomArea(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">return</span> e.LeftButton == MouseButtonState.Released;\r\n      }\r\n\r\n      Point panningStartPointInScreen;\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StartPanning(MouseButtonEventArgs e)\r\n      {\r\n         panningStartPointInScreen = e.GetPosition(<span style=\"color: blue;\">this</span>);\r\n         panningStartPointInViewport = panningStartPointInScreen.ScreenToViewport(Viewport.Transform);\r\n\r\n         Plotter2D.UndoProvider.CaptureOldValue(Viewport, Viewport2D.VisibleProperty, Viewport.Visible);\r\n\r\n         Cursor = Cursors.ScrollAll;\r\n\r\n         isPanning = <span style=\"color: blue;\">true</span>;\r\n         CaptureMouse();\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StartZoom(MouseButtonEventArgs e)\r\n      {\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StartZoomArea(MouseButtonEventArgs e)\r\n      {\r\n         zoomStartPoint = e.GetPosition(<span style=\"color: blue;\">this</span>);\r\n         <span style=\"color: blue;\">if</span> (Viewport.Output.Contains(zoomStartPoint))\r\n         {\r\n            isZooming = <span style=\"color: blue;\">true</span>;\r\n            AddSelectionAdorner();\r\n            CaptureMouse();\r\n            shouldKeepRatioWhileZooming = Keyboard.Modifiers == ModifierKeys.Shift;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> OnMouseDown(<span style=\"color: blue;\">object</span> sender, MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: green;\">// dragging</span>\r\n         <span style=\"color: blue;\">bool</span> shouldStartDrag = ShouldStartPanning(e);\r\n         <span style=\"color: blue;\">if</span> (shouldStartDrag)\r\n            StartPanning(e);\r\n\r\n         <span style=\"color: green;\">// zooming</span>\r\n         <span style=\"color: blue;\">bool</span> shouldStartZoom = ShouldStartZoom(e);\r\n         <span style=\"color: blue;\">if</span> (shouldStartZoom)\r\n            StartZoom(e);\r\n\r\n         <span style=\"color: green;\">// zooming area</span>\r\n         <span style=\"color: blue;\">bool</span> shouldStartZoomArea = ShouldStartZoom(e);\r\n         <span style=\"color: blue;\">if</span> (shouldStartZoomArea)\r\n            StartZoomArea(e);\r\n\r\n         ((IInputElement)Parent).Focus();\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> OnMouseMove(<span style=\"color: blue;\">object</span> sender, MouseEventArgs e)\r\n      {\r\n         <span style=\"color: green;\">// dragging</span>\r\n         <span style=\"color: blue;\">if</span> (isPanning &amp;&amp; ShouldContinuePanning(e))\r\n         {\r\n            HandlePanning(e);\r\n         }\r\n\r\n         <span style=\"color: green;\">// zooming</span>\r\n         <span style=\"color: blue;\">if</span> (isZooming &amp;&amp; ShouldContinueZoom(e))\r\n         {\r\n            HandleZoom(e);\r\n         }\r\n\r\n         <span style=\"color: green;\">// zooming area</span>\r\n         <span style=\"color: blue;\">if</span> (isZoomingArea &amp;&amp; ShouldContinueZoomArea(e))\r\n         {\r\n            HandleZoomArea(e);\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> HandleZoomArea(MouseEventArgs e)\r\n      {\r\n         Point zoomEndPoint = e.GetPosition(<span style=\"color: blue;\">this</span>);\r\n         UpdateZoomRect(zoomEndPoint);\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> HandleZoom(MouseEventArgs e)\r\n      {\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> HandlePanning(MouseEventArgs e)\r\n      {\r\n         Point endPoint = e.GetPosition(<span style=\"color: blue;\">this</span>).ScreenToViewport(Viewport.Transform);\r\n\r\n         Point loc = Viewport.Visible.Location;\r\n         Vector shift = panningStartPointInViewport - endPoint;\r\n         loc += shift;\r\n\r\n         <span style=\"color: green;\">// preventing unnecessary changes, if actually visible hasn't change.</span>\r\n         <span style=\"color: blue;\">if</span> (shift.X != 0 || shift.Y != 0)\r\n         {\r\n            Rect visible = Viewport.Visible;\r\n\r\n            visible.Location = loc;\r\n            Viewport.Visible = visible;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> IsShiftPressed()\r\n      {\r\n         <span style=\"color: blue;\">return</span> Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift);\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> UpdateZoomRect(Point zoomEndPoint)\r\n      {\r\n         Rect output = Viewport.Output;\r\n         Rect tmpZoomRect = <span style=\"color: blue;\">new</span> Rect(zoomStartPoint, zoomEndPoint);\r\n         tmpZoomRect = Rect.Intersect(tmpZoomRect, output);\r\n\r\n         shouldKeepRatioWhileZooming = IsShiftPressed();\r\n         <span style=\"color: blue;\">if</span> (shouldKeepRatioWhileZooming)\r\n         {\r\n            <span style=\"color: blue;\">double</span> currZoomRatio = tmpZoomRect.Width / tmpZoomRect.Height;\r\n            <span style=\"color: blue;\">double</span> zoomRatio = output.Width / output.Height;\r\n            <span style=\"color: blue;\">if</span> (currZoomRatio &lt; zoomRatio)\r\n            {\r\n               <span style=\"color: blue;\">double</span> oldHeight = tmpZoomRect.Height;\r\n               <span style=\"color: blue;\">double</span> height = tmpZoomRect.Width / zoomRatio;\r\n               tmpZoomRect.Height = height;\r\n               <span style=\"color: blue;\">if</span> (!tmpZoomRect.Contains(zoomStartPoint))\r\n               {\r\n                  tmpZoomRect.Offset(0, oldHeight - height);\r\n               }\r\n            }\r\n            <span style=\"color: blue;\">else</span>\r\n            {\r\n               <span style=\"color: blue;\">double</span> oldWidth = tmpZoomRect.Width;\r\n               <span style=\"color: blue;\">double</span> width = tmpZoomRect.Height * zoomRatio;\r\n               tmpZoomRect.Width = width;\r\n               <span style=\"color: blue;\">if</span> (!tmpZoomRect.Contains(zoomStartPoint))\r\n               {\r\n                  tmpZoomRect.Offset(oldWidth - width, 0);\r\n               }\r\n            }\r\n         }\r\n\r\n         zoomRect = tmpZoomRect;\r\n         UpdateSelectionAdorner();\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> OnMouseUp(<span style=\"color: blue;\">object</span> sender, MouseButtonEventArgs e)\r\n      {\r\n         OnParentMouseUp(e);\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> OnParentMouseUp(MouseButtonEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">if</span> (isPanning &amp;&amp; ShouldStopPanning(e))\r\n         {\r\n            StopPanning(e);\r\n         }\r\n         \r\n         <span style=\"color: blue;\">if</span> (isZooming &amp;&amp; ShouldStopZoom(e))\r\n         {\r\n            StopZooming();\r\n         }\r\n\r\n         <span style=\"color: blue;\">if</span> (isZoomingArea &amp;&amp; ShouldStopZoomArea(e))\r\n         {\r\n            StopZoomingArea();\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StopZooming()\r\n      {\r\n         isZooming = <span style=\"color: blue;\">false</span>;\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StopZoomingArea()\r\n      {\r\n         <span style=\"color: blue;\">if</span> (zoomRect.HasValue)\r\n         {\r\n            Point p1 = zoomRect.Value.TopLeft.ScreenToViewport(Viewport.Transform);\r\n            Point p2 = zoomRect.Value.BottomRight.ScreenToViewport(Viewport.Transform);\r\n            Rect newVisible = <span style=\"color: blue;\">new</span> Rect(p1, p2);\r\n            Viewport.Visible = newVisible;\r\n\r\n            zoomRect = <span style=\"color: blue;\">null</span>;\r\n            ReleaseMouseCapture();\r\n            RemoveSelectionAdorner();\r\n\r\n            isZoomingArea = <span style=\"color: blue;\">false</span>;\r\n         }\r\n      }\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">virtual</span> <span style=\"color: blue;\">void</span> StopPanning(MouseButtonEventArgs e)\r\n      {\r\n         isPanning = <span style=\"color: blue;\">false</span>;\r\n\r\n         Plotter2D.UndoProvider.CaptureNewValue(Plotter2D.Viewport, Viewport2D.VisibleProperty, Viewport.Visible);\r\n\r\n         Plotter2D.Focus();\r\n\r\n         ReleaseMouseCapture();\r\n         ClearValue(CursorProperty);\r\n      }\r\n\r\n      <span style=\"color: green;\">//protected override void OnRenderCore(DrawingContext dc, RenderState state)</span>\r\n      <span style=\"color: green;\">//{</span>\r\n      <span style=\"color: green;\">//    // do nothing here</span>\r\n      <span style=\"color: green;\">//}</span>\r\n\r\n      <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnLostFocus(RoutedEventArgs e)\r\n      {\r\n         <span style=\"color: blue;\">if</span> (isZooming)\r\n         {\r\n            RemoveSelectionAdorner();\r\n         }\r\n         ReleaseMouseCapture();\r\n         <span style=\"color: blue;\">base</span>.OnLostFocus(e);\r\n      }\r\n\r\n      <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> MouseWheelZoom(Point mousePos, <span style=\"color: blue;\">int</span> wheelRotationDelta)\r\n      {\r\n         Point zoomTo = mousePos.ScreenToViewport(Viewport.Transform);\r\n\r\n         <span style=\"color: blue;\">double</span> zoomSpeed = Math.Abs(wheelRotationDelta / Mouse.MouseWheelDeltaForOneLine);\r\n         zoomSpeed *= wheelZoomSpeed;\r\n         <span style=\"color: blue;\">if</span> (wheelRotationDelta &lt; 0)\r\n         {\r\n            zoomSpeed = 1 / zoomSpeed;\r\n         }\r\n         Viewport.Visible = Viewport.Visible.Zoom(zoomTo, zoomSpeed);\r\n      }\r\n   }\r\n}\r\n\r\n</pre>\n</div>",
    "PostedDate": "2011-03-28T06:52:34.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "592313",
    "ThreadId": "251482",
    "Html": "<p>thanks !!!</p>\r\n<p>can you post me a small example of how to use your code?</p>\r\n<p>:)</p>",
    "PostedDate": "2011-04-05T12:42:37.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "592592",
    "ThreadId": "251482",
    "Html": "<p>Hi</p>\r\n<p>I have changed the HalloWorldSample so now you pan the content with the middle mouse button and you can zoom by holding the middle mouse button and clicking the right one. This is just some strange case. ;o)</p>\r\n<p>You can download the sample here: <a href=\"http://www.file-upload.net/download-3339597/HelloWorld.zip.html\">http://www.file-upload.net/download-3339597/HelloWorld.zip.html</a></p>\r\n<p>Regards, Torsten</p>",
    "PostedDate": "2011-04-06T00:50:20.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]