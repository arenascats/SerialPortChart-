[
  {
    "Id": "271446",
    "ThreadId": "79287",
    "Html": "<p>Hi,</p>\r\n<p>I have a need to have a movable cursor or a slider on line charts. The way it should work is as follows:</p>\r\n<p>1. Slider/Cursor should be parallel to X-axis i.e. horizontal axis</p>\r\n<p>2. When user moves this slider, corresponding/intersecting Y values on all graphs show up in labels just like a stock ticker chart.</p>\r\n<p>3. Slider movement can be discrete i.e. there is no need for interpolation. This is like fixing the resolution to a predefined value depending on the x-axis value increments.</p>\r\n<p>&nbsp;</p>\r\n<p>My question is, is there such a feature already available in D3 or is it planned?</p>\r\n<p>If not, what will it take to implement it in D3?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>Faisal</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-29T08:02:19.653-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "273090",
    "ThreadId": "79287",
    "Html": "<p>Hello,</p>\r\n<p>I have a similar requirement: draggable markers (along the X axis) that influence the displayed data. How is it possible to add custom interactive elements to the plot?</p>\r\n<p>Best regards!</p>\r\n<p><strong>BB</strong></p>",
    "PostedDate": "2010-01-04T14:57:25.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "436948",
    "ThreadId": "79287",
    "Html": "<p>Did you have any luck with this? I would also like to implement a draggable cursor.</p>",
    "PostedDate": "2010-04-29T01:05:23.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437195",
    "ThreadId": "79287",
    "Html": "<p>No luck yet. There are built-in cursors/markers but those do not work very well. They jump around and sometimes even the axes jump too.</p>\r\n<p>May be one of the developers can reply and help out.</p>",
    "PostedDate": "2010-04-29T09:40:00.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437441",
    "ThreadId": "79287",
    "Html": "<p>sure it's not the right way but can't you like use a cursor coordinated graph, and bind the x and y mapping to the label which is added in the lower panel, so when the user moves the mouse on the chart your label changes as well?</p>",
    "PostedDate": "2010-04-30T00:19:29.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437452",
    "ThreadId": "79287",
    "Html": "<p>It's more about not following the mouse cursor. But having a vertical line on the chart that you can move as and when you need to.</p>",
    "PostedDate": "2010-04-30T00:44:05.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437466",
    "ThreadId": "79287",
    "Html": "<p>are you guys trying to do something like http://www.google.com/finance?q=C</p>",
    "PostedDate": "2010-04-30T01:19:02.403-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437468",
    "ThreadId": "79287",
    "Html": "<p>I can't speak for others but I my case all that's required is the ability to add vertical cursor line. It can be clicked on and then dragged left or right using the mouse.</p>\r\n<p>A bit like: <a href=\"http://i906.photobucket.com/albums/ac266/McBainUK/MultipleCursors.jpg\">http://i906.photobucket.com/albums/ac266/McBainUK/MultipleCursors.jpg</a></p>\r\n<p>I'm currently looking into custom control templates for the D3 DraggablePoint type.</p>",
    "PostedDate": "2010-04-30T01:24:04.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437471",
    "ThreadId": "79287",
    "Html": "<p>This is a better example, it shows exactly what I require from the D3 chart.</p>\r\n<p><a href=\"http://www.syncfusion.com/content/en-US/Products/screenshots/aspnet/img/InteractiveCursor_larger.png\">http://www.syncfusion.com/content/en-US/Products/screenshots/aspnet/img/InteractiveCursor_larger.png</a></p>",
    "PostedDate": "2010-04-30T01:30:45.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437475",
    "ThreadId": "79287",
    "Html": "<p>Hi,</p>\r\n<p>I think the thing you want can be created from VerticalLine and DraggablePoint, with line's x coordinate bound to point's position.X. You really can make a try to create a custom template for draggable point so that there would be no circle with point in its center, but a line or smth like that.</p>\r\n<p>Sorry, now I cannot help you more as I really do not have enough free time.</p>\r\n<p>BTW, you can add an issue to our issue tracker if you think that such type of control you need cannot be composed from line and draggable point, but requires some extra code and worth to exist in D3 as separate chart.</p>\r\n<p>Best regards,</p>\r\n<p>Mikhail.</p>",
    "PostedDate": "2010-04-30T01:47:17.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437478",
    "ThreadId": "79287",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>Thecentury wrote:</strong>\r\n<p>I think the thing you want can be created from VerticalLine and DraggablePoint, with line's x coordinate bound to point's position.X. You really can make a try to create a custom template for draggable point so that there would be no circle with point in its center, but a line or smth like that.</p>\r\n</blockquote>\r\n<p>I came to the same conclusion. Merging the line with a draggable point and using a custom template looks like it's working. Thanks Mikhail.</p>",
    "PostedDate": "2010-04-30T01:55:57.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437581",
    "ThreadId": "79287",
    "Html": "<p>I'm having trouble creating a template for the DraggablePoint where it draws a vertical line the entire height of the chart. It needs to be like this so you can click and drag on any part of the line, not just the draggable point area. Any thoughts?</p>",
    "PostedDate": "2010-04-30T08:29:58.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "437651",
    "ThreadId": "79287",
    "Html": "<p>Here is what I did to solve this same problem. I basically copied the CursorCoordinateGraph control and modified it. Then, you just host the new control inside the ChartPlotter like normal.</p>\r\n<p>This is by no means complete, but you could tailor it to your needs. Let me know how it goes.</p>\r\n<p>XAML:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LineCursorGraph</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:d3</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://research.microsoft.com/DynamicDataDisplay/1.0</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:local</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Controls</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">IsHitTestVisible</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">false</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Panel.ZIndex</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph.Resources</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">outerBorderStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Rectangle}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RadiusX</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RadiusY</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stroke</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LightGray</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">StrokeThickness</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Fill</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">#88FFFFFF</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">innerBorderStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Border}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">CornerRadius</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">4</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:green\">&lt;!--&lt;Setter Property=&quot;Background&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;--&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Margin</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">8,4,8,4</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n        \r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">textStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type TextBlock}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Margin</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2,1,2,1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">lineStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Line}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            &lt;Setter Property=&quot;Stroke&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;\r\n            &lt;Setter Property=&quot;StrokeThickness&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStrokeThickness}&quot;/&gt;\r\n            &lt;Setter Property=&quot;StrokeDashArray&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStrokeDashArray}&quot;/&gt;\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">IsHitTestVisible</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph.Resources</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Canvas</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">content</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Cursor</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">None</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Background</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Transparent</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">IsHitTestVisible</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizLine</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource lineStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertLine</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource lineStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizGrid</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Canvas.Top</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:green\">&lt;!--&lt;Rectangle Style=&quot;{StaticResource outerBorderStyle}&quot;/&gt;--&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource innerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizTextBlock</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource textStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertGrid</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Canvas.Left</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">5</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Visibility</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Collapsed</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Rectangle</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource outerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource innerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertTextBlock</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource textStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Canvas</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>C#:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Data;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color:blue\">using</span> System.Windows.Navigation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.Charts;\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.Common.Auxiliary;\r\n<span style=\"color:blue\">using</span> System.Diagnostics.CodeAnalysis;\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay;\r\n\r\n<span style=\"color:blue\">namespace</span> Controls\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Interaction logic for LineCursorGraph.xaml</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> LineCursorGraph : ContentGraph\r\n    {\r\n        <span style=\"color:blue\">#region</span> Enums\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> CursorType\r\n        {\r\n            CursorA,\r\n            CursorB,\r\n            Waveform,\r\n            Slicer\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> LineCursorOrientation\r\n        {\r\n            Vertical,\r\n            Horizontal\r\n        } \r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Dependency Properties\r\n        <span style=\"color:blue\">#region</span> CursorType\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty CursorTypeProperty = DependencyProperty.Register(<span style=\"color:#a31515\">&quot;CursorType&quot;</span>,\r\n            <span style=\"color:blue\">typeof</span>(CursorType), <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n            <span style=\"color:blue\">new</span> PropertyMetadata(CursorType.CursorA, OnCursorTypeChanged));\r\n\r\n        <span style=\"color:blue\">public</span> CursorType Type\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (CursorType)GetValue(CursorTypeProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(CursorTypeProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnCursorTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            LineCursorGraph line = (LineCursorGraph)d;\r\n            line.OnCursorTypeChanged();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnCursorTypeChanged()\r\n        {\r\n            <span style=\"color:blue\">switch</span> (Type)\r\n            {\r\n                <span style=\"color:blue\">case</span> CursorType.CursorA:\r\n                    <span style=\"color:green\">//_parentCursor = Cursors.SizeNS;</span>\r\n                    LineStroke = Brushes.White;\r\n                    Orientation = LineCursorOrientation.Vertical;\r\n                    Canvas.SetTop(horizGrid, 10);\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">default</span>:\r\n                <span style=\"color:blue\">case</span> CursorType.CursorB:\r\n                    <span style=\"color:green\">//_parentCursor = Cursors.SizeWE;</span>\r\n                    LineStroke = Brushes.Yellow;\r\n                    Orientation = LineCursorOrientation.Vertical;\r\n                    Canvas.SetTop(horizGrid, 50);\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">case</span> CursorType.Waveform:\r\n                    LineStroke = Brushes.LimeGreen;\r\n                    Orientation = LineCursorOrientation.Horizontal;\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">case</span> CursorType.Slicer:\r\n                    LineStroke = Brushes.Red;\r\n                    Orientation = LineCursorOrientation.Vertical;\r\n                    <span style=\"color:blue\">break</span>;\r\n            }\r\n\r\n            UpdateUIRepresentation();\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Orientation\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty OrientationProperty = DependencyProperty.Register(<span style=\"color:#a31515\">&quot;Orientation&quot;</span>,\r\n            <span style=\"color:blue\">typeof</span>(LineCursorOrientation), <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n            <span style=\"color:blue\">new</span> PropertyMetadata(LineCursorOrientation.Vertical, OnOrientationChanged));\r\n\r\n        <span style=\"color:blue\">public</span> LineCursorOrientation Orientation\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (LineCursorOrientation)GetValue(OrientationProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(OrientationProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            LineCursorGraph line = (LineCursorGraph)d;\r\n            line.OnOrientationChanged();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnOrientationChanged()\r\n        {\r\n            <span style=\"color:blue\">switch</span> (Orientation)\r\n            {\r\n                <span style=\"color:blue\">case</span> LineCursorOrientation.Horizontal:\r\n                    _parentCursor = Cursors.SizeNS;\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">default</span>:\r\n                <span style=\"color:blue\">case</span> LineCursorOrientation.Vertical:\r\n                    _parentCursor = Cursors.SizeWE;\r\n                    <span style=\"color:blue\">break</span>;\r\n            }\r\n\r\n            UpdateUIRepresentation();\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> XValue\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Identifies Value dependency property.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty XValueProperty =\r\n            DependencyProperty.Register(\r\n              <span style=\"color:#a31515\">&quot;XValue&quot;</span>,\r\n              <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n              <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n              <span style=\"color:blue\">new</span> PropertyMetadata(\r\n                  0.0, OnXValueChanged));\r\n\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the value in data coordinates</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> XValue\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(XValueProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(XValueProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnXValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            LineCursorGraph line = (LineCursorGraph)d;\r\n            line.OnXValueChanged();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnXValueChanged()\r\n        {\r\n            UpdateUIRepresentation();\r\n\r\n            <span style=\"color:blue\">if</span> (SyncValue) <span style=\"color:green\">// if this is an initial value set, then the other cursors should be synchronized</span>\r\n            {\r\n                RaiseEvent(<span style=\"color:blue\">new</span> RoutedEventArgs(CursorMovedEvent));\r\n                SyncValue = <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n        <span style=\"color:blue\">#endregion</span> \r\n\r\n        <span style=\"color:blue\">#region</span> YValue\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Identifies Value dependency property.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty YValueProperty =\r\n            DependencyProperty.Register(\r\n              <span style=\"color:#a31515\">&quot;YValue&quot;</span>,\r\n              <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n              <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n              <span style=\"color:blue\">new</span> PropertyMetadata(\r\n                  0.0, OnYValueChanged));\r\n\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the value in data coordinates</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> YValue\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(YValueProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(YValueProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnYValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            LineCursorGraph line = (LineCursorGraph)d;\r\n            line.OnYValueChanged();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnYValueChanged()\r\n        {\r\n            UpdateUIRepresentation();\r\n\r\n            <span style=\"color:green\">//if (SyncValue) // if this is an initial value set, then the other cursors should be synchronized</span>\r\n            <span style=\"color:green\">//{</span>\r\n            <span style=\"color:green\">//    RaiseEvent(new RoutedEventArgs(CursorMovedEvent));</span>\r\n            <span style=\"color:green\">//    SyncValue = false;</span>\r\n            <span style=\"color:green\">//}</span>\r\n        }\r\n        <span style=\"color:blue\">#endregion</span> \r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Public Properties\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> customXFormat = <span style=\"color:blue\">null</span>;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the custom format string of x label.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The custom X format.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> CustomXFormat\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> customXFormat; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (customXFormat != value)\r\n                {\r\n                    customXFormat = value;\r\n                    UpdateUIRepresentation();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> customYFormat = <span style=\"color:blue\">null</span>;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the custom format string of y label.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The custom Y format.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> CustomYFormat\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> customYFormat; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (customYFormat != value)\r\n                {\r\n                    customYFormat = value;\r\n                    UpdateUIRepresentation();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showHorizontalLine = <span style=\"color:blue\">true</span>;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to show horizontal line.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:gray\">&lt;c&gt;</span><span style=\"color:green\">true&lt;/c&gt; if horizontal line is shown; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowHorizontalLine\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showHorizontalLine; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (showHorizontalLine != value)\r\n                {\r\n                    showHorizontalLine = value;\r\n                    UpdateVisibility();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showVerticalLine = <span style=\"color:blue\">true</span>;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to show vertical line.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:gray\">&lt;c&gt;</span><span style=\"color:green\">true&lt;/c&gt; if vertical line is shown; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowVerticalLine\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showVerticalLine; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (showVerticalLine != value)\r\n                {\r\n                    showVerticalLine = value;\r\n                    UpdateVisibility();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showCursorText = <span style=\"color:blue\">true</span>;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to display the cursor text.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowCursorText\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showCursorText; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                showCursorText = value;\r\n                <span style=\"color:blue\">if</span> (showCursorText)\r\n                    horizGrid.Visibility = Visibility.Visible;\r\n                <span style=\"color:blue\">else</span>\r\n                    horizGrid.Visibility = Visibility.Collapsed;\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> Workspace _workspace;\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the Workspace that this control is associated with.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> Workspace Workspace\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _workspace; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _workspace = value;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> SyncValue { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">double</span> _customXValue;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> CustomXValue\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _customXValue; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _customXValue = value;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">double</span> _maxXValue;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> MaxXValue\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _maxXValue; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _maxXValue = value;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">double</span> _minXValue;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> MinXValue\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _minXValue; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _minXValue = value;\r\n            }\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Private Fields\r\n        FrameworkElement _parent;\r\n\r\n        Vector blockShift = <span style=\"color:blue\">new</span> Vector(3, 3);\r\n\r\n        <span style=\"color:blue\">bool</span> _drag = <span style=\"color:blue\">false</span>;\r\n\r\n        Cursor _parentCursor = Cursors.SizeWE; \r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> RoutedEvent CursorMovedEvent = EventManager.RegisterRoutedEvent(<span style=\"color:#a31515\">&quot;CursorMoved&quot;</span>,\r\n            RoutingStrategy.Bubble, <span style=\"color:blue\">typeof</span>(RoutedEventHandler), <span style=\"color:blue\">typeof</span>(LineCursorGraph));\r\n\r\n        <span style=\"color:blue\">public</span> LineCursorGraph()\r\n        {\r\n            InitializeComponent();\r\n\r\n            EventManager.RegisterClassHandler(<span style=\"color:blue\">typeof</span>(LineCursorGraph), CursorMovedEvent, \r\n                <span style=\"color:blue\">new</span> RoutedEventHandler(CursorMovedEventHandler));\r\n\r\n            <span style=\"color:green\">// default settings</span>\r\n            Orientation = LineCursorOrientation.Vertical;\r\n            LineStroke = Brushes.White;\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnMouseLeftButtonDown(MouseButtonEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">base</span>.OnMouseLeftButtonDown(e);\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnPlotterAttached()\r\n        {\r\n            <span style=\"color:green\">//base.OnPlotterAttached();</span>\r\n\r\n            _parent = (FrameworkElement)Parent;\r\n\r\n            _parent.MouseMove += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseMove);\r\n            _parent.MouseEnter += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseEnter);\r\n            _parent.MouseLeave += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseLeave);\r\n            _parent.MouseLeftButtonDown += <span style=\"color:blue\">new</span> MouseButtonEventHandler(parent_MouseLeftButtonDown);\r\n            _parent.MouseLeftButtonUp += <span style=\"color:blue\">new</span> MouseButtonEventHandler(parent_MouseLeftButtonUp);\r\n\r\n            UpdateUIRepresentation();\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> parent_MouseLeftButtonUp(<span style=\"color:blue\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            _drag = <span style=\"color:blue\">false</span>;\r\n            _parent.Cursor = Cursors.Cross;\r\n            _parent.ReleaseMouseCapture();\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> parent_MouseLeftButtonDown(<span style=\"color:blue\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsMouseNearLine(e.GetPosition(<span style=\"color:blue\">this</span>)))\r\n            {\r\n                _drag = <span style=\"color:blue\">true</span>;\r\n                _parent.CaptureMouse();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> parent_MouseLeave(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            _parent.ReleaseMouseCapture();\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> parent_MouseEnter(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> parent_MouseMove(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsMouseNearLine(e.GetPosition(<span style=\"color:blue\">this</span>)))\r\n            {\r\n                <span style=\"color:green\">//switch (Orientation)</span>\r\n                <span style=\"color:green\">//{</span>\r\n                <span style=\"color:green\">//    case LineCursorOrientation.Horizontal:</span>\r\n                <span style=\"color:green\">//        _parent.Cursor = Cursors.SizeNS;</span>\r\n                <span style=\"color:green\">//        break;</span>\r\n                <span style=\"color:green\">//    default:</span>\r\n                <span style=\"color:green\">//    case LineCursorOrientation.Vertical:</span>\r\n                <span style=\"color:green\">//        _parent.Cursor = Cursors.SizeWE;</span>\r\n                <span style=\"color:green\">//        break;</span>\r\n                <span style=\"color:green\">//}</span>\r\n                _parent.Cursor = _parentCursor;\r\n                e.Handled = <span style=\"color:blue\">true</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                _parent.Cursor = Cursors.Cross;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (_drag)\r\n            {\r\n                <span style=\"color:blue\">double</span> value = 0;\r\n                <span style=\"color:blue\">if</span> (Orientation == LineCursorOrientation.Vertical)\r\n                {\r\n                    value = e.GetPosition(Plotter2D.CentralGrid).ScreenToData(Plotter2D.Viewport.Transform).X;\r\n\r\n                    <span style=\"color:blue\">if</span> (value &gt; _minXValue &amp;&amp; value &lt; _maxXValue)\r\n                        XValue = value;\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                    XValue = e.GetPosition(Plotter2D.CentralGrid).ScreenToData(Plotter2D.Viewport.Transform).Y;\r\n\r\n                RaiseEvent(<span style=\"color:blue\">new</span> RoutedEventArgs(CursorMovedEvent));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">bool</span> IsMouseNearLine(Point mousePos)\r\n        {\r\n            Point dataPoint = mousePos.ScreenToData(Plotter2D.Viewport.Transform);\r\n\r\n            <span style=\"color:blue\">return</span> (dataPoint.X &gt;= XValue - 10 &amp;&amp; dataPoint.X &lt;= XValue + 10);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> CursorMovedEventHandler(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            LineCursorGraph cursor = (LineCursorGraph)sender;\r\n\r\n            <span style=\"color:blue\">var</span> obj = LogicalTreeHelper.GetParent(_parent);\r\n\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span> != cursor &amp;&amp; <span style=\"color:blue\">this</span>.Type == cursor.Type &amp;&amp; _workspace == cursor.Workspace)\r\n            {\r\n                XValue = cursor.XValue;\r\n                <span style=\"color:green\">//e.Handled = true;</span>\r\n                \r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnViewportPropertyChanged(ExtendedPropertyChangedEventArgs e)\r\n        {\r\n            UpdateUIRepresentation();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnPlotterDetaching()\r\n        {\r\n            <span style=\"color:green\">//base.OnPlotterDetaching();</span>\r\n        }\r\n\r\n\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> UpdateUIRepresentation()\r\n        {\r\n            <span style=\"color:blue\">if</span> (Plotter2D == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n\r\n            <span style=\"color:blue\">var</span> transform = Plotter2D.Viewport.Transform;\r\n            DataRect visible = Plotter2D.Viewport.Visible;\r\n            Rect output = Plotter2D.Viewport.Output;\r\n\r\n            Point dataPosition = <span style=\"color:blue\">new</span> Point(XValue, 0);\r\n            Point actualPosition = dataPosition.DataToScreen(transform);\r\n\r\n            <span style=\"color:green\">//horizLine.X1 = output.Left;</span>\r\n            <span style=\"color:green\">//horizLine.X2 = output.Right;</span>\r\n            <span style=\"color:green\">//horizLine.Y1 = position.Y;</span>\r\n            <span style=\"color:green\">//horizLine.Y2 = position.Y;</span>\r\n\r\n            vertLine.X1 = actualPosition.X;\r\n            vertLine.X2 = actualPosition.X;\r\n            vertLine.Y1 = output.Top;\r\n            vertLine.Y2 = output.Bottom;\r\n\r\n            <span style=\"color:blue\">if</span>(customXFormat != String.Empty &amp;&amp; customXFormat != <span style=\"color:blue\">null</span>)\r\n                horizTextBlock.Text = String.Format(customXFormat, _customXValue, YValue);\r\n            <span style=\"color:blue\">else</span>\r\n                horizTextBlock.Text = String.Format(<span style=\"color:#a31515\">&quot;({0:F0} cts, {1:F3} V)&quot;</span>, GetRoundedValue(visible.XMin, visible.XMax, XValue), YValue);\r\n\r\n            <span style=\"color:blue\">double</span> width = horizGrid.ActualWidth;\r\n            <span style=\"color:blue\">double</span> x = actualPosition.X + blockShift.X;\r\n            <span style=\"color:blue\">if</span> (x + width &gt; output.Right)\r\n            {\r\n                x = actualPosition.X - blockShift.X - width;\r\n            }\r\n            Canvas.SetLeft(horizGrid, x);\r\n\r\n            <span style=\"color:green\">//Point p1 = new Point(Value, Plotter.Viewport.Visible.YMin).DataToScreen(transform);</span>\r\n            <span style=\"color:green\">//Point p2 = new Point(Value, Plotter.Viewport.Visible.YMax).DataToScreen(transform);</span>\r\n\r\n            <span style=\"color:green\">//LineGeometry.StartPoint = p1;</span>\r\n            <span style=\"color:green\">//LineGeometry.EndPoint = p2;</span>\r\n\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> GetRoundedValue(<span style=\"color:blue\">double</span> min, <span style=\"color:blue\">double</span> max, <span style=\"color:blue\">double</span> value)\r\n        {\r\n            <span style=\"color:blue\">double</span> roundedValue = value;\r\n            <span style=\"color:green\">//var log = RoundingHelper.GetDifferenceLog(min, max);</span>\r\n            <span style=\"color:blue\">var</span> log = (<span style=\"color:blue\">int</span>)Math.Round(Math.Log10(Math.Abs(max - min)));\r\n            <span style=\"color:blue\">string</span> format = <span style=\"color:#a31515\">&quot;G3&quot;</span>;\r\n            <span style=\"color:blue\">double</span> diff = Math.Abs(max - min);\r\n            <span style=\"color:blue\">if</span> (1E3 &lt; diff &amp;&amp; diff &lt; 1E6)\r\n            {\r\n                format = <span style=\"color:#a31515\">&quot;F0&quot;</span>;\r\n            }\r\n            <span style=\"color:blue\">if</span> (log &lt; 0)\r\n                format = <span style=\"color:#a31515\">&quot;G&quot;</span> + (-log + 2).ToString();\r\n\r\n            <span style=\"color:blue\">return</span> roundedValue.ToString(format);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> UpdateVisibility()\r\n        {\r\n            horizLine.Visibility = vertGrid.Visibility = GetHorizontalVisibility();\r\n            vertLine.Visibility = horizGrid.Visibility = GetVerticalVisibility();\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> Visibility GetHorizontalVisibility()\r\n        {\r\n            <span style=\"color:blue\">return</span> showHorizontalLine ? Visibility.Visible : Visibility.Hidden;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> Visibility GetVerticalVisibility()\r\n        {\r\n            <span style=\"color:blue\">return</span> showVerticalLine ? Visibility.Visible : Visibility.Hidden;\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> LineStroke property\r\n\r\n        <span style=\"color:blue\">public</span> Brush LineStroke\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Brush)GetValue(LineStrokeProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(LineStrokeProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeProperty = DependencyProperty.Register(\r\n          <span style=\"color:#a31515\">&quot;LineStroke&quot;</span>,\r\n          <span style=\"color:blue\">typeof</span>(Brush),\r\n          <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n          <span style=\"color:blue\">new</span> PropertyMetadata(<span style=\"color:blue\">new</span> SolidColorBrush(Color.FromArgb(170, 86, 86, 86))));\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> LineStrokeThickness property\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> LineStrokeThickness\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(LineStrokeThicknessProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(LineStrokeThicknessProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeThicknessProperty = DependencyProperty.Register(\r\n          <span style=\"color:#a31515\">&quot;LineStrokeThickness&quot;</span>,\r\n          <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n          <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n          <span style=\"color:blue\">new</span> PropertyMetadata(2.0));\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> LineStrokeDashArray property\r\n\r\n        [SuppressMessage(<span style=\"color:#a31515\">&quot;Microsoft.Usage&quot;</span>, <span style=\"color:#a31515\">&quot;CA2227:CollectionPropertiesShouldBeReadOnly&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> DoubleCollection LineStrokeDashArray\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (DoubleCollection)GetValue(LineStrokeDashArrayProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(LineStrokeDashArrayProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeDashArrayProperty = DependencyProperty.Register(\r\n          <span style=\"color:#a31515\">&quot;LineStrokeDashArray&quot;</span>,\r\n          <span style=\"color:blue\">typeof</span>(DoubleCollection),\r\n          <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n          <span style=\"color:blue\">new</span> FrameworkPropertyMetadata(DoubleCollectionHelper.Create(3, 3)));\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-30T12:01:31.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444769",
    "ThreadId": "79287",
    "Html": "<p>Foxman,</p>\r\n<p>I've tried to get your&nbsp;LineCursorGraph code to compile without success. &nbsp; I'm getting errors relating to missing objects (e.g. Workspace, horizGrid). &nbsp;Presumably I'm not setting up the xaml/cs correctly.</p>\r\n<p>Any chance to posting the sample that shows this working?</p>\r\n<p>Thanks</p>\r\n<p>Grant.</p>",
    "PostedDate": "2010-05-19T02:35:54.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444798",
    "ThreadId": "79287",
    "Html": "<p>Adding the namespace to the x:Class class name fixed most of the compile errors except the Workspace error. &nbsp;I've just commented out the Workspace related code and it now can be compiled and used.</p>\r\n<p>It would still be handy to have a working sample as I don't yet understand how to use the LineCursorGraph.</p>",
    "PostedDate": "2010-05-19T03:49:16.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444894",
    "ThreadId": "79287",
    "Html": "<p>Sorry, I left some stuff that was specific to my aplication in there. Also, it was more meant as a guide for you develop your own version&nbsp;more than anything else. However, I will see what I can do for a sample and post something up.</p>",
    "PostedDate": "2010-05-19T07:17:32.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "472824",
    "ThreadId": "79287",
    "Html": "<p>In case anyone is interested, here's a slightly modified version of Foxman's code the implements a cursor that you can drag &amp; drop and/or bind to.</p>\r\n<p>XAML:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ChartExtensions.LineCursorGraph</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:d3</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://research.microsoft.com/DynamicDataDisplay/1.0</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:local</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:ChartExtensions</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">IsHitTestVisible</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">false</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Panel.ZIndex</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph.Resources</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">outerBorderStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Rectangle}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RadiusX</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RadiusY</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stroke</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LightGray</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">StrokeThickness</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Fill</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">#88FFFFFF</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">innerBorderStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Border}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">CornerRadius</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">4</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:green\">&lt;!--&lt;Setter Property=&quot;Background&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;--&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Margin</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">8,4,8,4</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">textStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type TextBlock}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Margin</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2,1,2,1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">lineStyle</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Type Line}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            &lt;Setter Property=&quot;Stroke&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStroke}&quot;/&gt;\r\n            &lt;Setter Property=&quot;StrokeThickness&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStrokeThickness}&quot;/&gt;\r\n            &lt;Setter Property=&quot;StrokeDashArray&quot; Value=&quot;{Binding \r\n\t\t\t\tRelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:LineCursorGraph}},\r\n\t\t\t\tPath=LineStrokeDashArray}&quot;/&gt;\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">IsHitTestVisible</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph.Resources</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Canvas</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">content</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Cursor</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">None</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Background</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Transparent</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">IsHitTestVisible</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizLine</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource lineStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertLine</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource lineStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizGrid</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Canvas.Top</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:green\">&lt;!--&lt;Rectangle Style=&quot;{StaticResource outerBorderStyle}&quot;/&gt;--&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource innerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">horizTextBlock</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource textStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertGrid</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Canvas.Left</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">5</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Visibility</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Collapsed</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Rectangle</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource outerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource innerBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">vertTextBlock</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource textStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n    \r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Canvas</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ContentGraph</span><span style=\"color:blue\">&gt;</span>\r\n    \r\n    \r\n</pre>\r\n</div>\r\n<p>C#:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Data;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color:blue\">using</span> System.Windows.Navigation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.Charts;\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.Common.Auxiliary;\r\n<span style=\"color:blue\">using</span> System.Diagnostics.CodeAnalysis;\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n\r\n<span style=\"color:blue\">namespace</span> ChartExtensions\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Interaction logic for LineCursorGraph.xaml</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n   \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> LineCursorGraph : ContentGraph\r\n        {\r\n            Cursor DefaultParentCursor\r\n            {\r\n                <span style=\"color:blue\">get</span>\r\n                {\r\n                    <span style=\"color:blue\">return</span> Cursors.Arrow;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">#region</span> Enums\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> CursorType\r\n            {\r\n                CursorA,\r\n                CursorB,\r\n                Waveform,\r\n                Slicer\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">enum</span> LineCursorOrientation\r\n            {\r\n                Vertical,\r\n                Horizontal\r\n            }\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Dependency Properties\r\n            <span style=\"color:blue\">#region</span> CursorType\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty CursorTypeProperty = DependencyProperty.Register(<span style=\"color:#a31515\">&quot;CursorType&quot;</span>,\r\n                <span style=\"color:blue\">typeof</span>(CursorType), <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n                <span style=\"color:blue\">new</span> PropertyMetadata(CursorType.CursorA, OnCursorTypeChanged));\r\n\r\n            <span style=\"color:blue\">public</span> CursorType Type\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (CursorType)GetValue(CursorTypeProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(CursorTypeProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnCursorTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n            {\r\n                LineCursorGraph line = (LineCursorGraph)d;\r\n                line.OnCursorTypeChanged();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnCursorTypeChanged()\r\n            {\r\n                <span style=\"color:blue\">switch</span> (Type)\r\n                {\r\n                    <span style=\"color:blue\">case</span> CursorType.CursorA:\r\n                        <span style=\"color:green\">//_parentCursor = Cursors.SizeNS;</span>\r\n                        LineStroke = Brushes.White;\r\n                        Orientation = LineCursorOrientation.Vertical;\r\n                        Canvas.SetTop(horizGrid, 10);\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">default</span>:\r\n                    <span style=\"color:blue\">case</span> CursorType.CursorB:\r\n                        <span style=\"color:green\">//_parentCursor = Cursors.SizeWE;</span>\r\n                        LineStroke = Brushes.Yellow;\r\n                        Orientation = LineCursorOrientation.Vertical;\r\n                        Canvas.SetTop(horizGrid, 50);\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> CursorType.Waveform:\r\n                        LineStroke = Brushes.LimeGreen;\r\n                        Orientation = LineCursorOrientation.Horizontal;\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> CursorType.Slicer:\r\n                        LineStroke = Brushes.Red;\r\n                        Orientation = LineCursorOrientation.Vertical;\r\n                        <span style=\"color:blue\">break</span>;\r\n                }\r\n\r\n                UpdateUIRepresentation();\r\n            }\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Orientation\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty OrientationProperty = DependencyProperty.Register(<span style=\"color:#a31515\">&quot;Orientation&quot;</span>,\r\n                <span style=\"color:blue\">typeof</span>(LineCursorOrientation), <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n                <span style=\"color:blue\">new</span> PropertyMetadata(LineCursorOrientation.Vertical, OnOrientationChanged));\r\n\r\n            <span style=\"color:blue\">public</span> LineCursorOrientation Orientation\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (LineCursorOrientation)GetValue(OrientationProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(OrientationProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n            {\r\n                LineCursorGraph line = (LineCursorGraph)d;\r\n                line.OnOrientationChanged();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnOrientationChanged()\r\n            {\r\n                <span style=\"color:blue\">switch</span> (Orientation)\r\n                {\r\n                    <span style=\"color:blue\">case</span> LineCursorOrientation.Horizontal:\r\n                        _parentCursor = Cursors.SizeNS;\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">default</span>:\r\n                    <span style=\"color:blue\">case</span> LineCursorOrientation.Vertical:\r\n                        _parentCursor = Cursors.SizeWE;\r\n                        <span style=\"color:blue\">break</span>;\r\n                }\r\n\r\n                UpdateUIRepresentation();\r\n            }\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> XValue\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Identifies Value dependency property.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty XValueProperty =\r\n                DependencyProperty.Register(\r\n                  <span style=\"color:#a31515\">&quot;XValue&quot;</span>,\r\n                  <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n                  <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n                  <span style=\"color:blue\">new</span> PropertyMetadata(\r\n                      0.0, OnXValueChanged));\r\n\r\n\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the value in data coordinates</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> XValue\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(XValueProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(XValueProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnXValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n            {\r\n                LineCursorGraph line = (LineCursorGraph)d;\r\n                line.OnXValueChanged();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnXValueChanged()\r\n            {\r\n                UpdateUIRepresentation();\r\n\r\n                <span style=\"color:blue\">if</span> (SyncValue) <span style=\"color:green\">// if this is an initial value set, then the other cursors should be synchronized</span>\r\n                {\r\n                    RaiseEvent(<span style=\"color:blue\">new</span> RoutedEventArgs(CursorMovedEvent));\r\n                    SyncValue = <span style=\"color:blue\">false</span>;\r\n                }\r\n            }\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> YValue\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Identifies Value dependency property.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty YValueProperty =\r\n                DependencyProperty.Register(\r\n                  <span style=\"color:#a31515\">&quot;YValue&quot;</span>,\r\n                  <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n                  <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n                  <span style=\"color:blue\">new</span> PropertyMetadata(\r\n                      0.0, OnYValueChanged));\r\n\r\n\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the value in data coordinates</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> YValue\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(YValueProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(YValueProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnYValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n            {\r\n                LineCursorGraph line = (LineCursorGraph)d;\r\n                line.OnYValueChanged();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> OnYValueChanged()\r\n            {\r\n                UpdateUIRepresentation();\r\n\r\n                <span style=\"color:green\">//if (SyncValue) // if this is an initial value set, then the other cursors should be synchronized</span>\r\n                <span style=\"color:green\">//{</span>\r\n                <span style=\"color:green\">//    RaiseEvent(new RoutedEventArgs(CursorMovedEvent));</span>\r\n                <span style=\"color:green\">//    SyncValue = false;</span>\r\n                <span style=\"color:green\">//}</span>\r\n            }\r\n            <span style=\"color:blue\">#endregion</span>\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Public Properties\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> customXFormat = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the custom format string of x label.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The custom X format.&lt;/value&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> CustomXFormat\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> customXFormat; }\r\n                <span style=\"color:blue\">set</span>\r\n                {\r\n                    <span style=\"color:blue\">if</span> (customXFormat != value)\r\n                    {\r\n                        customXFormat = value;\r\n                        UpdateUIRepresentation();\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> customYFormat = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the custom format string of y label.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The custom Y format.&lt;/value&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> CustomYFormat\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> customYFormat; }\r\n                <span style=\"color:blue\">set</span>\r\n                {\r\n                    <span style=\"color:blue\">if</span> (customYFormat != value)\r\n                    {\r\n                        customYFormat = value;\r\n                        UpdateUIRepresentation();\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showHorizontalLine = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to show horizontal line.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:gray\">&lt;c&gt;</span><span style=\"color:green\">true&lt;/c&gt; if horizontal line is shown; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowHorizontalLine\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showHorizontalLine; }\r\n                <span style=\"color:blue\">set</span>\r\n                {\r\n                    <span style=\"color:blue\">if</span> (showHorizontalLine != value)\r\n                    {\r\n                        showHorizontalLine = value;\r\n                        UpdateVisibility();\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showVerticalLine = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to show vertical line.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:gray\">&lt;c&gt;</span><span style=\"color:green\">true&lt;/c&gt; if vertical line is shown; otherwise, &lt;c&gt;false&lt;/c&gt;.&lt;/value&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowVerticalLine\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showVerticalLine; }\r\n                <span style=\"color:blue\">set</span>\r\n                {\r\n                    <span style=\"color:blue\">if</span> (showVerticalLine != value)\r\n                    {\r\n                        showVerticalLine = value;\r\n                        UpdateVisibility();\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> showCursorText = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n            <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value indicating whether to display the cursor text.</span>\r\n            <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> ShowCursorText\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> showCursorText; }\r\n                <span style=\"color:blue\">set</span>\r\n                {\r\n                    showCursorText = value;\r\n                    <span style=\"color:blue\">if</span> (showCursorText)\r\n                        horizGrid.Visibility = Visibility.Visible;\r\n                    <span style=\"color:blue\">else</span>\r\n                        horizGrid.Visibility = Visibility.Collapsed;\r\n                }\r\n\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> SyncValue { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Private Fields\r\n            FrameworkElement _parent;\r\n\r\n            Vector blockShift = <span style=\"color:blue\">new</span> Vector(3, 3);\r\n\r\n            <span style=\"color:blue\">bool</span> _drag = <span style=\"color:blue\">false</span>;\r\n\r\n            Cursor _parentCursor = Cursors.SizeWE;\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> RoutedEvent CursorMovedEvent = EventManager.RegisterRoutedEvent(<span style=\"color:#a31515\">&quot;CursorMoved&quot;</span>,\r\n                RoutingStrategy.Bubble, <span style=\"color:blue\">typeof</span>(RoutedEventHandler), <span style=\"color:blue\">typeof</span>(LineCursorGraph));\r\n\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> RoutedEventHandler CursorMoved\r\n            {\r\n                add { AddHandler(CursorMovedEvent, value); }\r\n                remove { RemoveHandler(CursorMovedEvent, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> LineCursorGraph()\r\n            {\r\n                InitializeComponent();\r\n\r\n                CursorMoved += <span style=\"color:blue\">new</span> RoutedEventHandler(CursorMovedEventHandler);\r\n\r\n                <span style=\"color:green\">// default settings</span>\r\n                Orientation = LineCursorOrientation.Vertical;\r\n                <span style=\"color:green\">//LineStroke = Brushes.Black;</span>\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnMouseLeftButtonDown(MouseButtonEventArgs e)\r\n            {\r\n                <span style=\"color:blue\">base</span>.OnMouseLeftButtonDown(e);\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnPlotterAttached()\r\n            {\r\n                <span style=\"color:blue\">base</span>.OnPlotterAttached();\r\n\r\n                _parent = (FrameworkElement)Parent;\r\n\r\n                _parent.MouseMove += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseMove);\r\n                _parent.MouseEnter += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseEnter);\r\n                _parent.MouseLeave += <span style=\"color:blue\">new</span> MouseEventHandler(parent_MouseLeave);\r\n                _parent.MouseLeftButtonDown += <span style=\"color:blue\">new</span> MouseButtonEventHandler(parent_MouseLeftButtonDown);\r\n                _parent.MouseLeftButtonUp += <span style=\"color:blue\">new</span> MouseButtonEventHandler(parent_MouseLeftButtonUp);\r\n\r\n                UpdateUIRepresentation();\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> parent_MouseLeftButtonUp(<span style=\"color:blue\">object</span> sender, MouseButtonEventArgs e)\r\n            {\r\n                _drag = <span style=\"color:blue\">false</span>;\r\n                _parent.Cursor = DefaultParentCursor;\r\n                _parent.ReleaseMouseCapture();\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> parent_MouseLeftButtonDown(<span style=\"color:blue\">object</span> sender, MouseButtonEventArgs e)\r\n            {\r\n                <span style=\"color:blue\">if</span> (IsMouseNearLine(e.GetPosition(<span style=\"color:blue\">this</span>)))\r\n                {\r\n                    _drag = <span style=\"color:blue\">true</span>;\r\n                    _parent.CaptureMouse();\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> parent_MouseLeave(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n            {\r\n                _parent.ReleaseMouseCapture();\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> parent_MouseEnter(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n            {\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> parent_MouseMove(<span style=\"color:blue\">object</span> sender, MouseEventArgs e)\r\n            {\r\n                <span style=\"color:blue\">if</span> (!_drag)\r\n                {\r\n                    <span style=\"color:blue\">if</span> (IsMouseNearLine(e.GetPosition(<span style=\"color:blue\">this</span>)))\r\n                    {\r\n                        _parent.Cursor = _parentCursor;\r\n                        e.Handled = <span style=\"color:blue\">true</span>;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        _parent.Cursor = DefaultParentCursor;\r\n                    }\r\n                }\r\n\r\n                <span style=\"color:blue\">if</span> (_drag)\r\n                {\r\n                    <span style=\"color:blue\">double</span> value = 0;\r\n                    <span style=\"color:blue\">if</span> (Orientation == LineCursorOrientation.Vertical)\r\n                    {\r\n                        value = e.GetPosition(Plotter2D.CentralGrid).ScreenToData(Plotter2D.Viewport.Transform).X;\r\n                        <span style=\"color:blue\">if</span> ( Plotter2D.Viewport.Visible.XMin &lt;= value &amp;&amp;\r\n                             Plotter2D.Viewport.Visible.XMax &gt;= value )\r\n                            XValue = value;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                        XValue = e.GetPosition(Plotter2D.CentralGrid).ScreenToData(Plotter2D.Viewport.Transform).Y;\r\n\r\n                    RaiseEvent(<span style=\"color:blue\">new</span> RoutedEventArgs(CursorMovedEvent));\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">bool</span> IsMouseNearLine(Point mousePos)\r\n            {\r\n                Point dataPoint = mousePos.ScreenToData(Plotter2D.Viewport.Transform);\r\n                <span style=\"color:blue\">if</span> (Orientation == LineCursorOrientation.Vertical)\r\n                {\r\n                    Point cursorPoint = <span style=\"color:blue\">new</span> Point(XValue, 0);\r\n                    Point screenPoint = cursorPoint.DataToScreen(Plotter2D.Viewport.Transform);\r\n                    <span style=\"color:blue\">return</span> Math.Abs(screenPoint.X - mousePos.X) &lt; 5;\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    Point cursorPoint = <span style=\"color:blue\">new</span> Point(0, YValue);\r\n                    Point screenPoint = cursorPoint.DataToScreen(Plotter2D.Viewport.Transform);\r\n                    <span style=\"color:blue\">return</span> Math.Abs(screenPoint.Y - mousePos.Y) &lt; 5;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">void</span> CursorMovedEventHandler(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n            {\r\n                LineCursorGraph cursor = (LineCursorGraph)sender;\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span> != cursor &amp;&amp; <span style=\"color:blue\">this</span>.Type == cursor.Type ) \r\n                {\r\n                    XValue = cursor.XValue;\r\n                    <span style=\"color:green\">//e.Handled = true;</span>\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnViewportPropertyChanged(ExtendedPropertyChangedEventArgs e)\r\n            {\r\n                UpdateUIRepresentation();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnPlotterDetaching()\r\n            {\r\n                <span style=\"color:blue\">base</span>.OnPlotterDetaching();\r\n            }\r\n\r\n            <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> UpdateUIRepresentation()\r\n            {\r\n                <span style=\"color:blue\">if</span> (Plotter2D == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">var</span> transform = Plotter2D.Viewport.Transform;\r\n                DataRect visible = Plotter2D.Viewport.Visible;\r\n                Rect output = Plotter2D.Viewport.Output;\r\n\r\n                Point dataPosition = <span style=\"color:blue\">new</span> Point(XValue, 0);\r\n                Point actualPosition = dataPosition.DataToScreen(transform);\r\n\r\n                vertLine.X1 = actualPosition.X;\r\n                vertLine.X2 = actualPosition.X;\r\n                vertLine.Y1 = output.Top;\r\n                vertLine.Y2 = output.Bottom;\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> GetRoundedValue(<span style=\"color:blue\">double</span> min, <span style=\"color:blue\">double</span> max, <span style=\"color:blue\">double</span> value)\r\n            {\r\n                <span style=\"color:blue\">double</span> roundedValue = value;\r\n                <span style=\"color:green\">//var log = RoundingHelper.GetDifferenceLog(min, max);</span>\r\n                <span style=\"color:blue\">var</span> log = (<span style=\"color:blue\">int</span>)Math.Round(Math.Log10(Math.Abs(max - min)));\r\n                <span style=\"color:blue\">string</span> format = <span style=\"color:#a31515\">&quot;G3&quot;</span>;\r\n                <span style=\"color:blue\">double</span> diff = Math.Abs(max - min);\r\n                <span style=\"color:blue\">if</span> (1E3 &lt; diff &amp;&amp; diff &lt; 1E6)\r\n                {\r\n                    format = <span style=\"color:#a31515\">&quot;F0&quot;</span>;\r\n                }\r\n                <span style=\"color:blue\">if</span> (log &lt; 0)\r\n                    format = <span style=\"color:#a31515\">&quot;G&quot;</span> + (-log + 2).ToString();\r\n\r\n                <span style=\"color:blue\">return</span> roundedValue.ToString(format);\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> UpdateVisibility()\r\n            {\r\n                horizLine.Visibility = vertGrid.Visibility = GetHorizontalVisibility();\r\n                vertLine.Visibility = horizGrid.Visibility = GetVerticalVisibility();\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> Visibility GetHorizontalVisibility()\r\n            {\r\n                <span style=\"color:blue\">return</span> showHorizontalLine ? Visibility.Visible : Visibility.Hidden;\r\n            }\r\n\r\n            <span style=\"color:blue\">private</span> Visibility GetVerticalVisibility()\r\n            {\r\n                <span style=\"color:blue\">return</span> showVerticalLine ? Visibility.Visible : Visibility.Hidden;\r\n            }\r\n\r\n            <span style=\"color:blue\">#region</span> LineStroke property\r\n\r\n            <span style=\"color:blue\">public</span> Brush LineStroke\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Brush)GetValue(LineStrokeProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(LineStrokeProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeProperty = DependencyProperty.Register(\r\n              <span style=\"color:#a31515\">&quot;LineStroke&quot;</span>,\r\n              <span style=\"color:blue\">typeof</span>(Brush),\r\n              <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n              <span style=\"color:blue\">new</span> PropertyMetadata( Brushes.Black));\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> LineStrokeThickness property\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> LineStrokeThickness\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">double</span>)GetValue(LineStrokeThicknessProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(LineStrokeThicknessProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeThicknessProperty = DependencyProperty.Register(\r\n              <span style=\"color:#a31515\">&quot;LineStrokeThickness&quot;</span>,\r\n              <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">double</span>),\r\n              <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n              <span style=\"color:blue\">new</span> PropertyMetadata(2.0));\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> LineStrokeDashArray property\r\n\r\n            [SuppressMessage(<span style=\"color:#a31515\">&quot;Microsoft.Usage&quot;</span>, <span style=\"color:#a31515\">&quot;CA2227:CollectionPropertiesShouldBeReadOnly&quot;</span>)]\r\n            <span style=\"color:blue\">public</span> DoubleCollection LineStrokeDashArray\r\n            {\r\n                <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (DoubleCollection)GetValue(LineStrokeDashArrayProperty); }\r\n                <span style=\"color:blue\">set</span> { SetValue(LineStrokeDashArrayProperty, value); }\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty LineStrokeDashArrayProperty = DependencyProperty.Register(\r\n              <span style=\"color:#a31515\">&quot;LineStrokeDashArray&quot;</span>,\r\n              <span style=\"color:blue\">typeof</span>(DoubleCollection),\r\n              <span style=\"color:blue\">typeof</span>(LineCursorGraph),\r\n              <span style=\"color:blue\">new</span> FrameworkPropertyMetadata(DoubleCollectionHelper.Create(3, 3)));\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n        }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-07-26T13:39:56.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "491666",
    "ThreadId": "79287",
    "Html": "<p><span style=\"color:#0000ff\">I made two new Wpf user controls in my program called CursorH and CursorV to have some horizontal and vertical cursors and it worked. This is my code for horizontal cursors.</span></p>\r\n<p><span style=\"color:#0000ff\">Regards</span></p>\r\n<p><span style=\"color:#0000ff\">Leandro</span></p>\r\n<p><em>CursorH.xaml</em><br><br>&nbsp;&nbsp;&nbsp; &lt;d3:PositionalViewportUIContainer x:Class=&quot;Microsoft.Research.DynamicDataDisplay.Charts.Shapes.CursorH&quot;<br>&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:d3=&quot;http://research.microsoft.com/DynamicDataDisplay/1.0&quot;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; xmlns:d3b=&quot;clr-namespace:Microsoft.Research.DynamicDataDisplay.Charts;assembly=DynamicDataDisplay&quot;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ToolTip=&quot;{Binding Position, RelativeSource={RelativeSource Self}}&quot; Height=&quot;80&quot; Width=&quot;897&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;d3:PositionalViewportUIContainer.Style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style TargetType=&quot;{x:Type d3:PositionalViewportUIContainer}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style.Resources&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Storyboard x:Key=&quot;story&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Storyboard&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style.Resources&gt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Focusable&quot; Value=&quot;False&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Opacity&quot; Value=&quot;10&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Cursor&quot; Value=&quot;ScrollAll&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;HorizontalContentAlignment&quot; Value=&quot;Center&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;VerticalContentAlignment&quot; Value=&quot;Center&quot;/&gt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style.Triggers&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MultiTrigger&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MultiTrigger.Conditions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Condition Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Condition Property=&quot;IsMouseCaptured&quot; Value=&quot;False&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/MultiTrigger.Conditions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MultiTrigger.EnterActions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;BeginStoryboard Name=&quot;storyboard&quot; Storyboard=&quot;{StaticResource story}&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/MultiTrigger.EnterActions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MultiTrigger.ExitActions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RemoveStoryboard BeginStoryboardName=&quot;storyboard&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/MultiTrigger.ExitActions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/MultiTrigger&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style.Triggers&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/d3:PositionalViewportUIContainer.Style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Rectangle Name = &quot;cursorgraph&quot;&nbsp; Fill=&quot;Gray&quot; Stroke=&quot;Transparent&quot; Margin=&quot;0,0,0,0&quot; Grid.ColumnSpan=&quot;5&quot; Height=&quot;4&quot; VerticalAlignment=&quot;Center&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/d3:PositionalViewportUIContainer&gt;<br><br><br>// CursorH.xaml.cs<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br>using System.Windows;<br>using System.Windows.Controls;<br>using System.Windows.Data;<br>using System.Windows.Documents;<br>using System.Windows.Input;<br>using System.Windows.Media;<br>using System.Windows.Media.Imaging;<br>using System.Windows.Navigation;<br>using System.Windows.Shapes;<br>using System.Windows.Controls.Primitives;<br>using Microsoft.Research.DynamicDataDisplay;<br><br>namespace Microsoft.Research.DynamicDataDisplay.Charts.Shapes<br>{<br>&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>&nbsp;&nbsp;&nbsp; /// Interaction logic for CursorH.xaml<br>&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>&nbsp;&nbsp;&nbsp; public partial class CursorH : Microsoft.Research.DynamicDataDisplay.Charts.PositionalViewportUIContainer<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalLine hLine = new HorizontalLine();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ChartPlotter cPlotter = null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public CursorH()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; /// Initializes a new instance of the &lt;see cref=&quot;CursorH&quot;/&gt; class.<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;position&quot;&gt;The position of CursorH.&lt;/param&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public CursorH(Point position) : this()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Position = position;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; bool dragging = false;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Point dragStart;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Vector shift;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void setCursor()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cPlotter != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Width = cPlotter.Viewport.Visible.XMax - cPlotter.Viewport.Visible.XMin;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cursorgraph.Width = hLine.Width;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void SetCursor(ChartPlotter plotter)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Visibility = Visibility.Visible;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cPlotter = plotter;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCursor();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void OnMouseLeftButtonDown(MouseButtonEventArgs e)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (Plotter == null)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return;<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dragStart = e.GetPosition(Plotter.ViewportPanel).ScreenToData(Plotter.Viewport.Transform);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCursor();<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; shift = Position - dragStart;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dragging = true;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; protected override void OnMouseLeave(MouseEventArgs e)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ReleaseMouseCapture();<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dragging = false;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; protected override void OnMouseMove(MouseEventArgs e)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (!dragging)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (IsMouseCaptured)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ReleaseMouseCapture();<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (!IsMouseCaptured)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; CaptureMouse();<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Point mouseInData = e.GetPosition(Plotter.ViewportPanel).ScreenToData(Plotter.Viewport.Transform);<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (mouseInData != dragStart)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Position = mouseInData + shift;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setCursor();<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e.Handled = true;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; protected override void OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (dragging)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dragging = false;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (IsMouseCaptured)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ReleaseMouseCapture();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hLine.Value = Position.Y;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e.Handled = true;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; protected override Size ArrangeOverride(Size arrangeBounds)<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return base.ArrangeOverride(arrangeBounds);<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; }<br>}<br><br><br>// implementation in a Window.xaml.cs file<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CursorH hCursor1 = new CursorH(new Point(0,0));<br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // after data loaded<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point pCursorH = new Point(0, 1).DataToScreen(Plotter.Viewport.Transform);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hCursor1.Position = pCursorH;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hCursor1.ToolTip = &quot;H. cursor 1&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Plotter.Children.Add(hCursor1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hCursor1.SetCursor(Plotter);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hCursor1.Visibility = Visibility.Collapsed;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br><br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // to show/hide the cursor<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hCursor1.Visibility = Visibility.Visible;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hCursor1.Visibility = Visibility.Hidden;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br></p>",
    "PostedDate": "2010-09-10T01:39:02.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "491773",
    "ThreadId": "79287",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>McBainUK wrote:</strong><br><blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>Thecentury wrote:</strong>\r\n<p>I think the thing you want can be created from VerticalLine and DraggablePoint, with line's x coordinate bound to point's position.X. You really can make a try to create a custom template for draggable point so that there would be no circle with point in its center, but a line or smth like that.</p>\r\n</blockquote>\r\n<p>I came to the same conclusion. Merging the line with a draggable point and using a custom template looks like it's working. Thanks Mikhail.</p></blockquote><p></p>",
    "PostedDate": "2010-09-10T06:17:59.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]