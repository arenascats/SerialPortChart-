[
  {
    "Id": "481604",
    "ThreadId": "223881",
    "Html": "<p>ello All,</p>\r\n<p>I am using d3's IsolineGraph to show a topographic map. It displays correctly, except I always get a runtime error (IsolinesUnsupportedCase Exception in IsolineBuilder::GetOutEdge()) when I use a certain data set. I made 1&nbsp;change to the source code:&nbsp; Exposed a private variable in IsolineGraph to allow the number of contours displayed to be changed, in my case I use 62 instead of the default hard-coded 12.</p>\r\n<p>Assuming that my change is hamless as it appears, my first question is: Is it possible that the values specified in the data set (either in the grid or the values) could cause this type of error?</p>\r\n<p>My second question has to do with the generated exception in IsolineBuilder. The case which generates it seems to be incorrect. Consider the following code snippet where &quot;lt&quot; stands for Left-Top, &quot;rb&quot; stands for Right-Bottom, etc:</p>\r\n<p>switch (inEdge)</p>\r\n<p>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;case Edge.Left:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == lt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * lt + near_zero * rt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (value == rt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * rt + near_zero * lt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new IsolineGenerationException(Properties.Resources.IsolinesUnsupportedCase);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;case Edge.Top:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == rt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * rt + near_zero * lt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;else if (value == lt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;value = near_one * lt + near_zero * rt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IsolineGenerationException(Properties.Resources.IsolinesUnsupportedCase);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;case Edge.Right:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;if (value == rb)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * rb + near_zero * rt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;else if (value == rt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * rt + near_zero * rb;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;throw new IsolineGenerationException(Properties.Resources.IsolinesUnsupportedCase);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;case Edge.Bottom:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == rb)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;value = near_one * rb + near_zero * lb;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;else if (value == lb)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = near_one * lb + near_zero * rb;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;throw new IsolineGenerationException(Properties.Resources.IsolinesUnsupportedCase);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;break;<br>&nbsp;&nbsp;&nbsp;}&nbsp;</p>\r\n<p>The case which always generates the error is Edge.Left. Is there an error in this case?&nbsp;I think that there might be because it does not follow the pattern of the remaining cases. If it did, I believe it would look more like this:</p>\r\n<p>case Edge.Left:</p>\r\n<p>if (value == lb)<br>&nbsp;&nbsp;&nbsp; value = near_one * lb + near_zero * lt;<br>else if (value == lt)<br>&nbsp;&nbsp;&nbsp; value = near_one * lt + near_zero * lb;<br>else<br>&nbsp;&nbsp;&nbsp; throw new IsolineGenerationException(Properties.Resources.IsolinesUnsupportedCase);<br>break;</p>\r\n<p>After I changed this, the data sets which worked previously continued to work while the sets which caused errors now failed with StackOverflow Exceptions (probably due to infinite recursion). I've tried a few other things (including re-writing GetOutEdge() so that it is iterative) but&nbsp;it always comes down to&nbsp;a runtime error (or infinite loop) in the same region...but only for certain data sets.</p>\r\n<p>So you can see my problem. Since I don't know enough about how the d3 code works, especially the isoline code. I can't tell if the error is caused by certain data sets or is simply exposed by them. Any help would be greatly appreciated. If someone can explain to me the isoline algorithm related to the above issue, it would also be helpful.</p>",
    "PostedDate": "2010-08-17T15:35:37.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "481623",
    "ThreadId": "223881",
    "Html": "<p>Does look like a bug in D3 (it looks like you are using the &quot;Recommended Download&quot; version).</p>\r\n<p>The more recent &quot;Nightly&quot; build has significantly different code in this area. &nbsp;I'd try changing to the latest nightly version (you'll need to compile it to get a DLL).</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>\r\n            <span style=\"color:blue\">switch</span> (inEdge)\r\n            {\r\n                <span style=\"color:blue\">case</span> Edge.Left:\r\n                    <span style=\"color:blue\">if</span> (value == lt)\r\n                        value = near_one * lt + near_zero * lb;\r\n                    <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (value == lb)\r\n                        value = near_one * lb + near_zero * lt;\r\n                    <span style=\"color:blue\">else</span>\r\n                        <span style=\"color:blue\">return</span> Edge.None;\r\n                    <span style=\"color:green\">// Now this is possible because of missing value</span>\r\n                    <span style=\"color:green\">//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);</span>\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">case</span> Edge.Top:\r\n                    <span style=\"color:blue\">if</span> (value == rt)\r\n                        value = near_one * rt + near_zero * lt;\r\n                    <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (value == lt)\r\n                        value = near_one * lt + near_zero * rt;\r\n                    <span style=\"color:blue\">else</span>\r\n                        <span style=\"color:blue\">return</span> Edge.None;\r\n                    <span style=\"color:green\">// Now this is possibe because of missing value</span>\r\n                    <span style=\"color:green\">//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);</span>\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">case</span> Edge.Right:\r\n                    <span style=\"color:blue\">if</span> (value == rb)\r\n                        value = near_one * rb + near_zero * rt;\r\n                    <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (value == rt)\r\n                        value = near_one * rt + near_zero * rb;\r\n                    <span style=\"color:blue\">else</span>\r\n                        <span style=\"color:blue\">return</span> Edge.None;\r\n                    <span style=\"color:green\">// Now this is possibe because of missing value</span>\r\n                    <span style=\"color:green\">//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);</span>\r\n                    <span style=\"color:blue\">break</span>;\r\n                <span style=\"color:blue\">case</span> Edge.Bottom:\r\n                    <span style=\"color:blue\">if</span> (value == rb)\r\n                        value = near_one * rb + near_zero * lb;\r\n                    <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (value == lb)\r\n                        value = near_one * lb + near_zero * rb;\r\n                    <span style=\"color:blue\">else</span>\r\n                        <span style=\"color:blue\">return</span> Edge.None;\r\n                    <span style=\"color:green\">// Now this is possibe because of missing value</span>\r\n                    <span style=\"color:green\">//throw new IsolineGenerationException(Strings.Exceptions.IsolinesUnsupportedCase);</span>\r\n                    <span style=\"color:blue\">break</span>;\r\n            }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Grant.</p>",
    "PostedDate": "2010-08-17T17:24:47.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "481956",
    "ThreadId": "223881",
    "Html": "<p>Grant,</p>\r\n<p>Thank you for your timely reply.</p>\r\n<p>I have built the .dll from the 'Nightly' source like you suggested and everything appears to work. I even incorporated the same custom changes I made to the 'Stable' version without any issues.</p>\r\n<p>Thanks again for all your help. It really is appreciated.</p>\r\n<p>...</p>\r\n<p>Justin</p>",
    "PostedDate": "2010-08-18T10:16:32.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482039",
    "ThreadId": "223881",
    "Html": "<p>I've spent the whole day testing this build and only came up with one issue:</p>\r\n<p>On certain data sets, when I change the number of contours to specific numbers not all of the contours will be displayed. For example, for one data set I was showing 25 contours successfully, but when I tried 26, only the first and last contour were displayed. The graph works for 24, 25, 27 and 28 but not 26.</p>\r\n<p>Also of interest, the underlying tracking graph continues to work even as the mouse scrolls over the missing contours.</p>\r\n<p>I realize that, by changing the source code, I am playing with fire...but being able to set the number of contours&nbsp;is a fairly important requirement.</p>\r\n<p>Any ideas as to what causes this failure or how to fix it would be very helpful.</p>",
    "PostedDate": "2010-08-18T13:31:23.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482057",
    "ThreadId": "223881",
    "Html": "<p>Justin,</p>\r\n<p>It would be very difficult to resolve the problem based solely on your description.</p>\r\n<p>However, if you can reproduce the problem with a small data set and program then someone (possibly me) could work out what is going wrong.&nbsp;</p>\r\n<p>Grant.</p>",
    "PostedDate": "2010-08-18T14:24:08.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482373",
    "ThreadId": "223881",
    "Html": "<p>Grant,</p>\r\n<p>I have made a simple and dirty program which reproduces this issue. I made a new WPF project called SimpleTest:</p>\r\n<p>Window1.xaml:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Window</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">SimpleTest.Window1</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:d3</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://research.microsoft.com/DynamicDataDisplay/1.0</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">Title</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Window1</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ChartPlotter</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">IsolineGraph</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">IsolineGraph</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">IsolineGraph</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">IsolineTrackingGraph</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">TrackingGraph</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">IsolineTrackingGraph</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">d3</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ChartPlotter</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Window</span><span style=\"color:blue\">&gt;</span>\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Window1.xaml.cs:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Data;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color:blue\">using</span> System.Windows.Navigation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n\r\n<span style=\"color:blue\">using</span> Microsoft.Research.DynamicDataDisplay.DataSources.MultiDimensional;\r\n\r\n<span style=\"color:blue\">namespace</span> SimpleTest\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Interaction logic for Window1.xaml</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> Window1 : Window\r\n    {\r\n        <span style=\"color:blue\">public</span> Window1()\r\n        {\r\n            InitializeComponent();\r\n            Go();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Go()\r\n        {\r\n            <span style=\"color:blue\">double</span>[,] adHeights = <span style=\"color:blue\">new</span> <span style=\"color:blue\">double</span>[50, 50];\r\n            Point[,] aoPoints = <span style=\"color:blue\">new</span> Point[50, 50];\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> nXIndex = 0; nXIndex &lt; 50; nXIndex++)\r\n            {\r\n                <span style=\"color:blue\">int</span> nXMax = 25 - System.Math.Abs(25 - nXIndex);\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> nYIndex = 0; nYIndex &lt; 50; nYIndex++)\r\n                {\r\n                    <span style=\"color:blue\">int</span> nYMax = 25 - System.Math.Abs(25 - nYIndex);                    \r\n\r\n                    <span style=\"color:blue\">double</span> dHeight;\r\n                    <span style=\"color:blue\">if</span> (nXMax &lt;= nYMax)\r\n                    {\r\n                        dHeight = nXMax;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        dHeight = nYMax;\r\n                    }\r\n\r\n                    Point oCurrentPoint = <span style=\"color:blue\">new</span> Point(nXIndex, nYIndex);\r\n\r\n                    adHeights[nXIndex, nYIndex] = dHeight;\r\n                    aoPoints[nXIndex, nYIndex] = oCurrentPoint;\r\n                }\r\n            }\r\n\r\n            WarpedDataSource2D&lt;<span style=\"color:blue\">double</span>&gt; oData = <span style=\"color:blue\">new</span> WarpedDataSource2D&lt;<span style=\"color:blue\">double</span>&gt;(adHeights, aoPoints);\r\n\r\n            <span style=\"color:blue\">this</span>.IsolineGraph.NumberOfContours = 25;\r\n\r\n            <span style=\"color:blue\">this</span>.IsolineGraph.DataSource = oData;\r\n            TrackingGraph.DataSource = oData;\r\n        }\r\n    }\r\n}</pre>\r\n<pre><br></pre>\r\n<pre>You will also need to modify two files in the D3 source and rebuild it:</pre>\r\n<pre>IsolineBuilder.cs - Change access level on 'density' member to public</pre>\r\n<pre>IsolineGraph.cs - Add this (or similar) property:</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> NumberOfContours\r\n{\r\n    <span style=\"color:blue\">get</span>\r\n    {\r\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.IsolineBuilder.density;\r\n    }\r\n    <span style=\"color:blue\">set</span>\r\n    {\r\n        <span style=\"color:blue\">this</span>.IsolineBuilder.density = value;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<br></pre>\r\n<pre>To reproduce the issue, change the number of contours shown to 26.</pre>\r\n<pre>...</pre>\r\n<pre>Justin</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-08-19T08:40:49.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]